const test = require('tape')
const yaml = require('js-yaml')
const utility = require('../lib/metadata/utility')
const {Container} = require('../lib/metadata')
const {LocaleResources} = require('../lib/locale-resources')

/** @type {MigrationContext} */
const ctx = {
  conn: null,
  langConfig: {defaultLang: 'en', supportLang: ['en', 'uk']},
  options: {silent: true},
  container: new Container({silent: true}),
  resources: new LocaleResources()
}

require('../lib/registration/uba-metadata')(ctx.container)
require('../lib/registration/cdn-metadata')(ctx.container)
require('../lib/registration/org-metadata')(ctx.container)

test('Organizations', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'Org 1',
          'name_uk^': 'Org 1',
          'fullName_en^': 'Org 1',
          'fullName_uk^': 'Org 1'
        }
      }
    ],
    'All defaults'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    name:
      en: This is org
      uk: Таки орг
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'This is org',
          'name_uk^': 'Таки орг',
          'fullName_en^': 'This is org',
          'fullName_uk^': 'Таки орг'
        }
      }
    ],
    'fullName default from name'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    name:
      en: This is org
      uk: Таки орг
    nameGen:
      en: This is org gen
      uk: Таки орг gen
    nameDat:
      en: This is org dat
      uk: Таки орг dat
    fullName:
      en: This is org full
      uk: Таки орг full
    fullNameGen:
      en: This is org full gen
      uk: Таки орг full gen
    fullNameDat:
      en: This is org full dat
      uk: Таки орг full dat
    description:
      en: This is org description
      uk: Таки орг description
    OKPOCode: "1234567890"
    taxCode: "12345678"
    vatCode: vatCode1
    businessType: busType1
    ownershipType: ownType1
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'This is org',
          'name_uk^': 'Таки орг',
          'nameGen_en^': 'This is org gen',
          'nameGen_uk^': 'Таки орг gen',
          'nameDat_en^': 'This is org dat',
          'nameDat_uk^': 'Таки орг dat',
          'fullName_en^': 'This is org full',
          'fullName_uk^': 'Таки орг full',
          'fullNameGen_en^': 'This is org full gen',
          'fullNameGen_uk^': 'Таки орг full gen',
          'fullNameDat_en^': 'This is org full dat',
          'fullNameDat_uk^': 'Таки орг full dat',
          'description_en^': 'This is org description',
          'description_uk^': 'Таки орг description',
          OKPOCode: '1234567890',
          taxCode: '12345678',
          vatCode: 'vatCode1',
          businessType: 'busType1',
          ownershipType: 'ownType1'
        }
      }
    ],
    'Fully customized'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    organizations:
    - org11
    - org12
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'Org 1',
          'name_uk^': 'Org 1',
          'fullName_en^': 'Org 1',
          'fullName_uk^': 'Org 1'
        }
      },
      {
        entity: 'org_organization',
        execParams: {
          parent: 'org1',
          code: 'org11',
          'name_en^': 'Org 11',
          'name_uk^': 'Org 11',
          'fullName_en^': 'Org 11',
          'fullName_uk^': 'Org 11'
        }
      },
      {
        entity: 'org_organization',
        execParams: {
          parent: 'org1',
          code: 'org12',
          'name_en^': 'Org 12',
          'name_uk^': 'Org 12',
          'fullName_en^': 'Org 12',
          'fullName_uk^': 'Org 12'
        }
      }
    ],
    'Child organizations'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    execGroups:
    - eg1
    - eg2
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'Org 1',
          'name_uk^': 'Org 1',
          'fullName_en^': 'Org 1',
          'fullName_uk^': 'Org 1'
        }
      },
      {
        entity: 'org_execgroup',
        execParams: {
          parent: 'org1',
          code: 'eg1',
          'name_en^': 'Eg 1',
          'name_uk^': 'Eg 1'
        }
      },
      {
        entity: 'org_execgroup',
        execParams: {
          parent: 'org1',
          code: 'eg2',
          'name_en^': 'Eg 2',
          'name_uk^': 'Eg 2'
        }
      },
    ],
    'Child exec groups'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    departments:
    - dep11
    - dep12
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'Org 1',
          'name_uk^': 'Org 1',
          'fullName_en^': 'Org 1',
          'fullName_uk^': 'Org 1'
        }
      },
      {
        entity: 'org_department',
        execParams: {
          parent: 'org1',
          code: 'dep11',
          'name_en^': 'Dep 11',
          'name_uk^': 'Dep 11',
          'fullName_en^': 'Dep 11',
          'fullName_uk^': 'Dep 11'
        }
      },
      {
        entity: 'org_department',
        execParams: {
          parent: 'org1',
          code: 'dep12',
          'name_en^': 'Dep 12',
          'name_uk^': 'Dep 12',
          'fullName_en^': 'Dep 12',
          'fullName_uk^': 'Dep 12'
        }
      }
    ],
    'Child departments'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    staff:
    - su11
    - su12
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'Org 1',
          'name_uk^': 'Org 1',
          'fullName_en^': 'Org 1',
          'fullName_uk^': 'Org 1'
        }
      },
      {
        entity: 'org_staffunit',
        execParams: {
          parent: 'org1',
          code: 'su11',
          'name_en^': 'Su 11',
          'name_uk^': 'Su 11',
          'fullName_en^': 'Su 11',
          'fullName_uk^': 'Su 11'
        }
      },
      {
        entity: 'org_staffunit',
        execParams: {
          parent: 'org1',
          code: 'su12',
          'name_en^': 'Su 12',
          'name_uk^': 'Su 12',
          'fullName_en^': 'Su 12',
          'fullName_uk^': 'Su 12'
        }
      }
    ],
    'Child staff units'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- org1:
    contacts:
      phone: "1234"
      email: vasyl@pupckin.com
`)),
      ctx.container.getFileType('org_organization'),
      ctx
    )),
    [
      {
        entity: 'org_organization',
        execParams: {
          code: 'org1',
          'name_en^': 'Org 1',
          'name_uk^': 'Org 1',
          'fullName_en^': 'Org 1',
          'fullName_uk^': 'Org 1'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'org1',
          contactType: 'phone',
          value: '1234'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'org1',
          contactType: 'email',
          value: 'vasyl@pupckin.com'
        }
      }
    ],
    'Organization contacts'
  )

  t.end()
})

test('Departments', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'name_en^': 'Dep 1',
          'name_uk^': 'Dep 1',
          'fullName_en^': 'Dep 1',
          'fullName_uk^': 'Dep 1'
        }
      }
    ],
    'All defaults'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1:
    name:
      en: This is dep
      uk: Таки dep
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'name_en^': 'This is dep',
          'name_uk^': 'Таки dep',
          'fullName_en^': 'This is dep',
          'fullName_uk^': 'Таки dep'
        }
      }
    ],
    'fullName default from name'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1:
    name:
      en: This is dep
      uk: Таки dep
    nameGen:
      en: This is dep gen
      uk: Таки dep gen
    nameDat:
      en: This is dep dat
      uk: Таки dep dat
    fullName:
      en: This is dep full
      uk: Таки dep full
    fullNameGen:
      en: This is dep full gen
      uk: Таки dep full gen
    fullNameDat:
      en: This is dep full dat
      uk: Таки dep full dat
    description:
      en: This is dep description
      uk: Таки dep description
    depType: depType1
    isClerical: true
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'isClerical': true,
          'name_en^': 'This is dep',
          'name_uk^': 'Таки dep',
          'nameGen_en^': 'This is dep gen',
          'nameGen_uk^': 'Таки dep gen',
          'nameDat_en^': 'This is dep dat',
          'nameDat_uk^': 'Таки dep dat',
          'fullName_en^': 'This is dep full',
          'fullName_uk^': 'Таки dep full',
          'fullNameGen_en^': 'This is dep full gen',
          'fullNameGen_uk^': 'Таки dep full gen',
          'fullNameDat_en^': 'This is dep full dat',
          'fullNameDat_uk^': 'Таки dep full dat',
          'description_en^': 'This is dep description',
          'description_uk^': 'Таки dep description',
          depType: 'depType1'
        }
      }
    ],
    'Fully customized'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1:
    departments:
    - dep11
    - dep12
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'name_en^': 'Dep 1',
          'name_uk^': 'Dep 1',
          'fullName_en^': 'Dep 1',
          'fullName_uk^': 'Dep 1'
        }
      },
      {
        entity: 'org_department',
        execParams: {
          parent: 'dep1',
          code: 'dep11',
          'name_en^': 'Dep 11',
          'name_uk^': 'Dep 11',
          'fullName_en^': 'Dep 11',
          'fullName_uk^': 'Dep 11'
        }
      },
      {
        entity: 'org_department',
        execParams: {
          parent: 'dep1',
          code: 'dep12',
          'name_en^': 'Dep 12',
          'name_uk^': 'Dep 12',
          'fullName_en^': 'Dep 12',
          'fullName_uk^': 'Dep 12'
        }
      }
    ],
    'Child departments'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1:
    execGroups:
    - eg1
    - eg2
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'name_en^': 'Dep 1',
          'name_uk^': 'Dep 1',
          'fullName_en^': 'Dep 1',
          'fullName_uk^': 'Dep 1'
        }
      },
      {
        entity: 'org_execgroup',
        execParams: {
          parent: 'dep1',
          code: 'eg1',
          'name_en^': 'Eg 1',
          'name_uk^': 'Eg 1'
        }
      },
      {
        entity: 'org_execgroup',
        execParams: {
          parent: 'dep1',
          code: 'eg2',
          'name_en^': 'Eg 2',
          'name_uk^': 'Eg 2'
        }
      },
    ],
    'Child exec groups'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1:
    staff:
    - su11
    - su12
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'name_en^': 'Dep 1',
          'name_uk^': 'Dep 1',
          'fullName_en^': 'Dep 1',
          'fullName_uk^': 'Dep 1'
        }
      },
      {
        entity: 'org_staffunit',
        execParams: {
          parent: 'dep1',
          code: 'su11',
          'name_en^': 'Su 11',
          'name_uk^': 'Su 11',
          'fullName_en^': 'Su 11',
          'fullName_uk^': 'Su 11'
        }
      },
      {
        entity: 'org_staffunit',
        execParams: {
          parent: 'dep1',
          code: 'su12',
          'name_en^': 'Su 12',
          'name_uk^': 'Su 12',
          'fullName_en^': 'Su 12',
          'fullName_uk^': 'Su 12'
        }
      }
    ],
    'Child staff units'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- dep1:
    contacts:
      phone: "1234"
      email: vasyl@pupckin.com
`)),
      ctx.container.getFileType('org_department'),
      ctx
    )),
    [
      {
        entity: 'org_department',
        execParams: {
          code: 'dep1',
          'name_en^': 'Dep 1',
          'name_uk^': 'Dep 1',
          'fullName_en^': 'Dep 1',
          'fullName_uk^': 'Dep 1'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'dep1',
          contactType: 'phone',
          value: '1234'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'dep1',
          contactType: 'email',
          value: 'vasyl@pupckin.com'
        }
      }
    ],
    'Department contacts'
  )

  t.end()
})

test('Staff units', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'Su 1',
          'name_uk^': 'Su 1',
          'fullName_en^': 'Su 1',
          'fullName_uk^': 'Su 1'
        }
      }
    ],
    'All defaults'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    name:
      en: This is su
      uk: Таки su
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'This is su',
          'name_uk^': 'Таки su',
          'fullName_en^': 'This is su',
          'fullName_uk^': 'Таки su'
        }
      }
    ],
    'fullName default from name'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    name:
      en: This is su
      uk: Таки su
    nameGen:
      en: This is su gen
      uk: Таки su gen
    nameDat:
      en: This is su dat
      uk: Таки su dat
    fullName:
      en: This is su full
      uk: Таки su full
    fullNameGen:
      en: This is su full gen
      uk: Таки su full gen
    fullNameDat:
      en: This is su full dat
      uk: Таки su full dat
    description:
      en: This is su description
      uk: Таки su description
    subordinationLevel: 10
    isBoss: true
    profession: prof1
    type: suType1
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'This is su',
          'name_uk^': 'Таки su',
          'nameGen_en^': 'This is su gen',
          'nameGen_uk^': 'Таки su gen',
          'nameDat_en^': 'This is su dat',
          'nameDat_uk^': 'Таки su dat',
          'fullName_en^': 'This is su full',
          'fullName_uk^': 'Таки su full',
          'fullNameGen_en^': 'This is su full gen',
          'fullNameGen_uk^': 'Таки su full gen',
          'fullNameDat_en^': 'This is su full dat',
          'fullNameDat_uk^': 'Таки su full dat',
          'description_en^': 'This is su description',
          'description_uk^': 'Таки su description',
          subordinationLevel: 10,
          isBoss: true,
          profession: 'prof1',
          type: 'suType1'
        }
      }
    ],
    'Fully customized'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    employees:
      tab001:
        employee: emp1
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'Su 1',
          'name_uk^': 'Su 1',
          'fullName_en^': 'Su 1',
          'fullName_uk^': 'Su 1'
        }
      },
      {
        entity: 'org_employeeonstaff',
        execParams: {
          tabNo: 'tab001',
          employee: 'emp1',
          staffunit: 'su1',
          employeeOnStaffType: 'PERMANENT'
        }
      }
    ],
    'Staff unit with employee-on-staff'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    contacts:
      phone: "1234"
      email: vasyl@pupckin.com
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'Su 1',
          'name_uk^': 'Su 1',
          'fullName_en^': 'Su 1',
          'fullName_uk^': 'Su 1'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'su1',
          contactType: 'phone',
          value: '1234'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'su1',
          contactType: 'email',
          value: 'vasyl@pupckin.com'
        }
      }
    ],
    'Staff unit contacts'
  )

  t.end()
})

test('Employees', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- emp1
`)),
      ctx.container.getFileType('org_employee'),
      ctx
    )),
    [
      {
        entity: 'org_employee',
        execParams: {
          code: 'emp1',
          user: 'emp1',
          'firstName_en^': 'Emp 1',
          'firstName_uk^': 'Emp 1',
          'lastName_en^': 'Emp 1',
          'lastName_uk^': 'Emp 1',
          'fullFIO_en^': 'Emp 1',
          'fullFIO_uk^': 'Emp 1',
          sexType: 'FM'
        }
      }
    ],
    'All defaults'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- emp1:
    firstName:
      en: This is emp firstName
      uk: Таки emp firstName
    firstNameGen:
      en: This is emp firstName gen
      uk: Таки emp firstName gen
    firstNameDat:
      en: This is emp firstName dat
      uk: Таки emp firstName dat
    firstNameObj:
      en: This is emp firstName obj
      uk: Таки emp firstName obj
    middleName:
      en: This is emp middleName
      uk: Таки emp middleName
    middleNameGen:
      en: This is emp middleName gen
      uk: Таки emp middleName gen
    middleNameDat:
      en: This is emp middleName dat
      uk: Таки emp middleName dat
    middleNameObj:
      en: This is emp middleName obj
      uk: Таки emp middleName obj
    lastName:
      en: This is emp lastName
      uk: Таки emp lastName
    lastNameGen:
      en: This is emp lastName gen
      uk: Таки emp lastName gen
    lastNameDat:
      en: This is emp lastName dat
      uk: Таки emp lastName dat
    lastNameObj:
      en: This is emp lastName obj
      uk: Таки emp lastName obj
    shortFIO:
      en: This is emp shortFIO
      uk: Таки emp shortFIO
    shortFIOGen:
      en: This is emp shortFIO gen
      uk: Таки emp shortFIO gen
    shortFIODat:
      en: This is emp shortFIO dat
      uk: Таки emp shortFIO dat
    shortFIOObj:
      en: This is emp shortFIO obj
      uk: Таки emp shortFIO obj
    fullFIO:
      en: This is emp fullFIO
      uk: Таки emp fullFIO
    fullFIOGen:
      en: This is emp fullFIO gen
      uk: Таки emp fullFIO gen
    fullFIODat:
      en: This is emp fullFIO dat
      uk: Таки emp fullFIO dat
    fullFIOObj:
      en: This is emp fullFIO obj
      uk: Таки emp fullFIO obj
    apply:
      en: This is emp apply
      uk: Таки emp apply
    applyGen:
      en: This is emp apply gen
      uk: Таки emp apply gen
    applyDat:
      en: This is emp apply dat
      uk: Таки emp apply dat
    applyObj:
      en: This is emp apply obj
      uk: Таки emp apply obj      
    description:
      en: This is emp description
      uk: Таки emp description
    suffix:
      en: This is emp suffix
      uk: Таки emp suffix
    birthDate: 01/01/2001
    sexType: F
    user: usr_010101
`)),
      ctx.container.getFileType('org_employee'),
      ctx
    )),
    [
      {
        entity: 'org_employee',
        execParams: {
          code: 'emp1',
          'firstName_en^': 'This is emp firstName',
          'firstName_uk^': 'Таки emp firstName',
          'firstNameGen_en^': 'This is emp firstName gen',
          'firstNameGen_uk^': 'Таки emp firstName gen',
          'firstNameDat_en^': 'This is emp firstName dat',
          'firstNameDat_uk^': 'Таки emp firstName dat',
          'firstNameObj_en^': 'This is emp firstName obj',
          'firstNameObj_uk^': 'Таки emp firstName obj',
          'middleName_en^': 'This is emp middleName',
          'middleName_uk^': 'Таки emp middleName',
          'middleNameGen_en^': 'This is emp middleName gen',
          'middleNameGen_uk^': 'Таки emp middleName gen',
          'middleNameDat_en^': 'This is emp middleName dat',
          'middleNameDat_uk^': 'Таки emp middleName dat',
          'middleNameObj_en^': 'This is emp middleName obj',
          'middleNameObj_uk^': 'Таки emp middleName obj',
          'lastName_en^': 'This is emp lastName',
          'lastName_uk^': 'Таки emp lastName',
          'lastNameGen_en^': 'This is emp lastName gen',
          'lastNameGen_uk^': 'Таки emp lastName gen',
          'lastNameDat_en^': 'This is emp lastName dat',
          'lastNameDat_uk^': 'Таки emp lastName dat',
          'lastNameObj_en^': 'This is emp lastName obj',
          'lastNameObj_uk^': 'Таки emp lastName obj',
          'shortFIO_en^': 'This is emp shortFIO',
          'shortFIO_uk^': 'Таки emp shortFIO',
          'shortFIOGen_en^': 'This is emp shortFIO gen',
          'shortFIOGen_uk^': 'Таки emp shortFIO gen',
          'shortFIODat_en^': 'This is emp shortFIO dat',
          'shortFIODat_uk^': 'Таки emp shortFIO dat',
          'shortFIOObj_en^': 'This is emp shortFIO obj',
          'shortFIOObj_uk^': 'Таки emp shortFIO obj',
          'fullFIO_en^': 'This is emp fullFIO',
          'fullFIO_uk^': 'Таки emp fullFIO',
          'fullFIOGen_en^': 'This is emp fullFIO gen',
          'fullFIOGen_uk^': 'Таки emp fullFIO gen',
          'fullFIODat_en^': 'This is emp fullFIO dat',
          'fullFIODat_uk^': 'Таки emp fullFIO dat',
          'fullFIOObj_en^': 'This is emp fullFIO obj',
          'fullFIOObj_uk^': 'Таки emp fullFIO obj',
          'apply_en^': 'This is emp apply',
          'apply_uk^': 'Таки emp apply',
          'applyGen_en^': 'This is emp apply gen',
          'applyGen_uk^': 'Таки emp apply gen',
          'applyDat_en^': 'This is emp apply dat',
          'applyDat_uk^': 'Таки emp apply dat',
          'applyObj_en^': 'This is emp apply obj',
          'applyObj_uk^': 'Таки emp apply obj',
          'description_en^': 'This is emp description',
          'description_uk^': 'Таки emp description',
          'suffix_en^': 'This is emp suffix',
          'suffix_uk^': 'Таки emp suffix',
          birthDate: '01/01/2001',
          sexType: 'F',
          user: 'usr_010101'
        }
      }
    ],
    'Fully customized'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- emp1:
    staff:
      tab01:
        staffunit: su1
`)),
      ctx.container.getFileType('org_employee'),
      ctx
    )),
    [
      {
        entity: 'org_employee',
        execParams: {
          code: 'emp1',
          user: 'emp1',
          'firstName_en^': 'Emp 1',
          'firstName_uk^': 'Emp 1',
          'lastName_en^': 'Emp 1',
          'lastName_uk^': 'Emp 1',
          'fullFIO_en^': 'Emp 1',
          'fullFIO_uk^': 'Emp 1',
          sexType: 'FM'
        }
      },
      {
        entity: 'org_employeeonstaff',
        execParams: {
          tabNo: 'tab01',
          staffunit: 'su1',
          employee: 'emp1',
          employeeOnStaffType: 'PERMANENT'
        }
      }
    ],
    'Employee with employee on staff'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- emp1:
    contacts:
      phone: "1234"
      email: vasyl@pupckin.com
`)),
      ctx.container.getFileType('org_employee'),
      ctx
    )),
    [
      {
        entity: 'org_employee',
        execParams: {
          code: 'emp1',
          user: 'emp1',
          'firstName_en^': 'Emp 1',
          'firstName_uk^': 'Emp 1',
          'lastName_en^': 'Emp 1',
          'lastName_uk^': 'Emp 1',
          'fullFIO_en^': 'Emp 1',
          'fullFIO_uk^': 'Emp 1',
          sexType: 'FM'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          employee: 'emp1',
          contactType: 'phone',
          value: '1234'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          employee: 'emp1',
          contactType: 'email',
          value: 'vasyl@pupckin.com'
        }
      }
    ],
    'Employee contacts'
  )

  t.end()
})

test('Employee on staff', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- tn001:
    employee: emp1
    staffunit: su1
`)),
      ctx.container.getFileType('org_employeeonstaff'),
      ctx
    )),
    [
      {
        entity: 'org_employeeonstaff',
        execParams: {
          tabNo: 'tn001',
          employee: 'emp1',
          staffunit: 'su1',
          employeeOnStaffType: 'PERMANENT',
        }
      }
    ],
    'All defaults'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- tn001:
    employee: emp1
    staffunit: su1
    employeeOnStaffType: TEMP
    description:
      en: desc en
      uk: desc uk
`)),
      ctx.container.getFileType('org_employeeonstaff'),
      ctx
    )),
    [
      {
        entity: 'org_employeeonstaff',
        execParams: {
          tabNo: 'tn001',
          employee: 'emp1',
          staffunit: 'su1',
          employeeOnStaffType: 'TEMP',
          'description_en^': 'desc en',
          'description_uk^': 'desc uk'
        }
      }
    ],
    'Fully customized'
  )

  t.end()
})

test('Execution groups', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- eg1:
    parent: org1
    members:
    - su1
    - su2
`)),
      ctx.container.getFileType('org_execgroup'),
      ctx
    )),
    [
      {
        entity: 'org_execgroup',
        execParams: {
          code: 'eg1',
          parent: 'org1',
          'name_en^': 'Eg 1',
          'name_uk^': 'Eg 1'
        }
      },
      {
        entity: 'org_execgroupmember',
        execParams: {
          orgUnit: 'su1',
          execGroup: 'eg1'
        }
      },
      {
        entity: 'org_execgroupmember',
        execParams: {
          orgUnit: 'su2',
          execGroup: 'eg1'
        }
      }
    ],
    'Group and members'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    name:
      en: This is su
      uk: Таки su
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'This is su',
          'name_uk^': 'Таки su',
          'fullName_en^': 'This is su',
          'fullName_uk^': 'Таки su'
        }
      }
    ],
    'fullName default from name'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    name:
      en: This is su
      uk: Таки su
    nameGen:
      en: This is su gen
      uk: Таки su gen
    nameDat:
      en: This is su dat
      uk: Таки su dat
    fullName:
      en: This is su full
      uk: Таки su full
    fullNameGen:
      en: This is su full gen
      uk: Таки su full gen
    fullNameDat:
      en: This is su full dat
      uk: Таки su full dat
    description:
      en: This is su description
      uk: Таки su description
    subordinationLevel: 10
    isBoss: true
    profession: prof1
    type: suType1
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'This is su',
          'name_uk^': 'Таки su',
          'nameGen_en^': 'This is su gen',
          'nameGen_uk^': 'Таки su gen',
          'nameDat_en^': 'This is su dat',
          'nameDat_uk^': 'Таки su dat',
          'fullName_en^': 'This is su full',
          'fullName_uk^': 'Таки su full',
          'fullNameGen_en^': 'This is su full gen',
          'fullNameGen_uk^': 'Таки su full gen',
          'fullNameDat_en^': 'This is su full dat',
          'fullNameDat_uk^': 'Таки su full dat',
          'description_en^': 'This is su description',
          'description_uk^': 'Таки su description',
          subordinationLevel: 10,
          isBoss: true,
          profession: 'prof1',
          type: 'suType1'
        }
      }
    ],
    'Fully customized'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    employees:
      tab001:
        employee: emp1
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'Su 1',
          'name_uk^': 'Su 1',
          'fullName_en^': 'Su 1',
          'fullName_uk^': 'Su 1'
        }
      },
      {
        entity: 'org_employeeonstaff',
        execParams: {
          tabNo: 'tab001',
          employee: 'emp1',
          staffunit: 'su1',
          employeeOnStaffType: 'PERMANENT'
        }
      }
    ],
    'Staff unit with employee-on-staff'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- su1:
    contacts:
      phone: "1234"
      email: vasyl@pupckin.com
`)),
      ctx.container.getFileType('org_staffunit'),
      ctx
    )),
    [
      {
        entity: 'org_staffunit',
        execParams: {
          code: 'su1',
          'name_en^': 'Su 1',
          'name_uk^': 'Su 1',
          'fullName_en^': 'Su 1',
          'fullName_uk^': 'Su 1'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'su1',
          contactType: 'phone',
          value: '1234'
        }
      },
      {
        entity: 'cdn_contact',
        execParams: {
          orgUnit: 'su1',
          contactType: 'email',
          value: 'vasyl@pupckin.com'
        }
      }
    ],
    'Staff unit contacts'
  )

  t.end()
})
