const test = require('tape')
const yaml = require('js-yaml')
const utility = require('../lib/metadata/utility')
const {Container} = require('../lib/metadata')
const {LocaleResources} = require('../lib/locale-resources')

/** @type {MigrationContext} */
const ctx = {
  conn: null,
  langConfig: {defaultLang: 'en', supportLang: ['en', 'uk']},
  options: {silent: true},
  container: new Container({silent: true}),
  resources: new LocaleResources()
}

require('../lib/registration/uba-metadata')(ctx.container)
require('../lib/registration/ubm-metadata')(ctx.container)

test('Roles', t => {
  const inst = {
    execParams: {
      allowedAppMethods: 'a,b,c'
    }
  }
  const dbInst = {
    allowedAppMethods: 'c,d,a'
  }
  const repo = ctx.container.getRepository('uba_role')
  repo.emit('update:before', {execParams: inst.execParams, dbInst})
  t.equals(inst.execParams.allowedAppMethods, 'a,b,c,d', 'Combine roles')

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  description: My buyer
  els:
    read: mdm, bdg
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {
        entity: 'uba_role',
        execParams: {
          name: 'buyer',
          'description_en^': 'My buyer',
          'description_uk^': 'My buyer'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'mdm_*', methodMask: 'select',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'MDM_READ_BUYER',
          description: 'buyer read access to mdm model'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'bdg_*', methodMask: 'select',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'BDG_READ_BUYER',
          description: 'buyer read access to bdg model'
        }
      }
    ],
    'ELS rules - read access for comma-separated models'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  $noDefaults: true
  allowedAppMethods:
  - method1
  - method2
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {entity: 'uba_role', execParams: {name: 'buyer', allowedAppMethods: 'method1,method2'}}
    ],
    'ELS rules - read access for comma-separated models'
  )

  // noinspection JSCheckFunctionSignatures
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
role1:
  els:
    custom:
      # Format 1: "entityMask: methodMask", code and description built automatically
      tst_entity: selectAll*

      # Format 2: "code: entityMask, methodMask, description", description is optional
      TST_ENTITY_ROLE1_SELECT_ALL: tst_*, selectAll, Permission to call selectAll method for all tst entities for role1

      # Format 2a: "code: !entityMask, methodMask, description", description is optional
      TST_ENTITY_ROLE1_DENY_UPD: "!tst_*,[iuda],Deny updates to tst entities for role1"
`)),
      ctx.container.getFileType('roles'), ctx
    )),
    [
      {entity: 'uba_role', execParams: {name: 'role1', 'description_en^': 'Role 1', 'description_uk^': 'Role 1'}},
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'tst_entity', methodMask: 'selectAll*',
          ruleRole: 'role1', ruleType: 'A',
          code: 'TST_ENTITY_SELECT_ALL_ROLE1', description: 'role1 access to tst_entity entity, selectAll* methods'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'tst_*',
          methodMask: 'selectAll',
          ruleRole: 'role1',
          ruleType: 'A',
          code: 'TST_ENTITY_ROLE1_SELECT_ALL',
          description: 'Permission to call selectAll method for all tst entities for role1'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'tst_*',
          methodMask: '[iuda]',
          ruleRole: 'role1',
          ruleType: 'D',
          code: 'TST_ENTITY_ROLE1_DENY_UPD',
          description: 'Deny updates to tst entities for role1'
        }
      }
    ],
    'ELS rules - custom access - as object, 2 formats'
  )

  // noinspection JSCheckFunctionSignatures
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
role1:
  els:
    custom:
    - tst_*.selectAll*
    - tst_Entity.selectAll 
    - "!tst_Entity.delete"
    - uba_*: '*'
    - "!ubm_*": '*'
`)),
      ctx.container.getFileType('roles'), ctx
    )),
    [
      {entity: 'uba_role', execParams: {name: 'role1', 'description_en^': 'Role 1', 'description_uk^': 'Role 1'}},
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'tst_*', methodMask: 'selectAll*',
          ruleRole: 'role1', ruleType: 'A',
          code: 'TST_SELECT_ALL_ROLE1', description: 'role1 access to tst_* entities, selectAll* methods'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'tst_Entity', methodMask: 'selectAll',
          ruleType: 'A',
          ruleRole: 'role1',
          code: 'TST_ENTITY_SELECT_ALL_ROLE1', description: 'role1 access to tst_Entity entity, selectAll method'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'tst_Entity', methodMask: 'delete',
          ruleType: 'D',
          ruleRole: 'role1',
          code: 'TST_ENTITY_DELETE_ROLE1', description: 'role1 access to tst_Entity entity, delete method'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'uba_*', methodMask: '*',
          ruleType: 'A',
          ruleRole: 'role1',
          code: 'UBA_ALL_ROLE1', description: 'role1 access to uba_* entities, all methods'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'ubm_*', methodMask: '*',
          ruleType: 'D',
          ruleRole: 'role1',
          code: 'UBM_ALL_ROLE1', description: 'role1 access to ubm_* entities, all methods'
        }
      }
    ],
    'ELS rules - custom access'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  els:
    crud: [pln, bdg]
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {entity: 'uba_role', execParams: {name: 'buyer', 'description_en^': 'Buyer', 'description_uk^': 'Buyer'}},
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'pln_*', methodMask: '[adisu]*',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'PLN_CRUD_BUYER', description: 'buyer crud access to pln model'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'bdg_*', methodMask: '[adisu]*',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'BDG_CRUD_BUYER', description: 'buyer crud access to bdg model'
        }
      }
    ],
    'ELS rules - 2 models as array'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  els:
    full: pln
    read_update: bdg
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {entity: 'uba_role', execParams: {name: 'buyer', 'description_en^': 'Buyer', 'description_uk^': 'Buyer'}},
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'bdg_*', methodMask: '[su]*',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'BDG_READ_UPDATE_BUYER', description: 'buyer read_update access to bdg model'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'pln_*', methodMask: '*',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'PLN_FULL_BUYER', description: 'buyer full access to pln model'
        }
      }
    ],
    'ELS rules - 2 rules types with 1 models as single element each'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
role2:
  allowedAppMethods: appMethod1, appMethod2
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {
        entity: 'uba_role',
        execParams: {name: 'role2', 'description_en^': 'Role 2', 'description_uk^': 'Role 2', allowedAppMethods: 'appMethod1,appMethod2'}
      }
    ],
    'Application methods as string'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
role2:
  description:
    en: Role 2
    uk: Таки Role 2
  allowedAppMethods: appMethod3
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {
        entity: 'uba_role',
        execParams: {name: 'role2', 'description_en^': 'Role 2', 'description_uk^': 'Таки Role 2', allowedAppMethods: 'appMethod3'}
      }
    ],
    'Application method - one'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
role2:
  allowedAppMethods:
  - appMethod5
  - appMethod4
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {
        entity: 'uba_role',
        execParams: {name: 'role2', 'description_en^': 'Role 2', 'description_uk^': 'Role 2', allowedAppMethods: 'appMethod5,appMethod4'}
      }
    ],
    'Application method - array'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  $amendment: true
  els:
    full: pln
    read_update: bdg
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'bdg_*', methodMask: '[su]*',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'BDG_READ_UPDATE_BUYER', description: 'buyer read_update access to bdg model'
        }
      },
      {
        entity: 'uba_els',
        execParams: {
          entityMask: 'pln_*', methodMask: '*',
          ruleRole: 'buyer', ruleType: 'A',
          code: 'PLN_FULL_BUYER', description: 'buyer full access to pln model'
        }
      }
    ],
    'ELS rules - amend ELS - do not output the role itself'
  )

  ctx.container.getRepository('ubm_desktop').dbInstances = [
    {ID: 1001, code: 'dsk9'}
  ]
  ctx.container.getRepository('ubm_navshortcut').dbInstances = [
    {desktopID: 1001, ID: 2010, code: 'zzz_Some'},
    {desktopID: 1001, ID: 2011, code: 'zzz_Some_child', parentID: 2010},
    {desktopID: 1001, ID: 2100, code: 'top_Group'},
    {desktopID: 1001, ID: 2101, code: 'cdn_Dictionary1', parentID: 2100},
    {desktopID: 1001, ID: 2110, code: 'sub_Group'},
    {desktopID: 1001, ID: 2112, code: 'cdn_Dictionary2', parentID: 2110},
    {desktopID: 1001, ID: 2123, code: 'cdn_Dictionary3', parentID: 2110}
  ]

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
dataAdmin:
  shortcuts:
  - cdn_*
`)),
      ctx.container.getFileType('roles'),
      ctx
    )),
    [
      {
        entity: 'uba_role',
        execParams: {name: 'dataAdmin', 'description_en^': 'Data Admin', 'description_uk^': 'Data Admin'}
      },
      {
        entity: 'ubm_navshortcut_adm',
        execParams: {shortcut: 'cdn_Dictionary1', subject: 'dataAdmin'}
      },
      {
        entity: 'ubm_navshortcut_adm',
        execParams: {shortcut: 'top_Group', subject: 'dataAdmin'}
      },
      {
        entity: 'ubm_navshortcut_adm',
        execParams: {shortcut: 'cdn_Dictionary2', subject: 'dataAdmin'}
      },
      {
        entity: 'ubm_navshortcut_adm',
        execParams: {shortcut: 'sub_Group', subject: 'dataAdmin'}
      },
      {
        entity: 'ubm_navshortcut_adm',
        execParams: {shortcut: 'cdn_Dictionary3', subject: 'dataAdmin'}
      },
      {
        entity: 'ubm_desktop_adm',
        execParams: {desktop: 'dsk9', subject: 'dataAdmin'}
      }
    ],
    'Role with smart shortcuts'
  )

  t.end()
})

test('Users', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
user1:
  description: User the first
  roles: role1, role2
  trustedIP: 172.0.0.1
`)),
      ctx.container.getFileType('users'),
      ctx
    )),
    [
      {
        entity: 'uba_user',
        execParams: {name: 'user1', description: 'User the first', fullName: 'user1', trustedIP: '172.0.0.1'}
      },
      {entity: 'uba_userrole', execParams: {user: 'user1', role: 'role1'}},
      {entity: 'uba_userrole', execParams: {user: 'user1', role: 'role2'}}
    ],
    'User with 2 roles'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
user2:
  description: User the second
  groups: group1, group2
`)),
      ctx.container.getFileType('users'),
      ctx
    )),
    [
      {entity: 'uba_user', execParams: {name: 'user2', description: 'User the second', fullName: 'user2'}},
      {entity: 'uba_usergroup', execParams: {user: 'user2', group: 'group1'}},
      {entity: 'uba_usergroup', execParams: {user: 'user2', group: 'group2'}}
    ],
    'User with 2 groups'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
user3:
  firstName: testFirstName
  lastName: testLastName
  description: User the third
  password: "1234"
  lastPasswordChangeDate: 2000-01-01
`)),
      ctx.container.getFileType('users'),
      ctx
    )),
    [
      {
        entity: 'uba_user', execParams: {
          name: 'user3',
          description: 'User the third',
          fullName: 'testFirstName testLastName', firstName: 'testFirstName', lastName: 'testLastName',
          password: '1234',
          lastPasswordChangeDate: new Date('2000-01-01')
        }
      },
    ],
    'User with password and lastPasswordChangeDate'
  )

  t.end()
})

test('Groups', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  name: Buyer
  description: My buyer
  roles:
  - role1
  - role2
  users:
  - user1
  - user2
`)),
      ctx.container.getFileType('groups'),
      ctx
    )),
    [
      {entity: 'uba_group', execParams: {code: 'buyer', 'name_en^': 'Buyer', 'name_uk^': 'Buyer', description: 'My buyer'}},
      {entity: 'uba_grouprole', execParams: {group: 'buyer', role: 'role1'}},
      {entity: 'uba_grouprole', execParams: {group: 'buyer', role: 'role2'}},
      {entity: 'uba_usergroup', execParams: {group: 'buyer', user: 'user1'}},
      {entity: 'uba_usergroup', execParams: {group: 'buyer', user: 'user2'}}
    ],
    'Group with roles and users'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
buyer:
  name: Buyer
  description: My buyer
  roles:
  - role1
  - role2
`)),
      ctx.container.getFileType('groups'),
      ctx
    )),
    [
      {entity: 'uba_group', execParams: {code: 'buyer', 'name_en^': 'Buyer', 'name_uk^': 'Buyer', description: 'My buyer'}},
      {entity: 'uba_grouprole', execParams: {group: 'buyer', role: 'role1'}},
      {entity: 'uba_grouprole', execParams: {group: 'buyer', role: 'role2'}}
    ],
    'Group with roles'
  )

  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
supplier:
  name: Supplier Role
  users:
  - userA
  - userB
`)),
      ctx.container.getFileType('groups'),
      ctx
    )),
    [
      {entity: 'uba_group', execParams: {code: 'supplier', 'name_en^': 'Supplier Role', 'name_uk^': 'Supplier Role'}},
      {entity: 'uba_usergroup', execParams: {group: 'supplier', user: 'userA'}},
      {entity: 'uba_usergroup', execParams: {group: 'supplier', user: 'userB'}}
    ],
    'Group with users'
  )

  t.end()
})
