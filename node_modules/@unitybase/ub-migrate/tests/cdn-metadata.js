const test = require('tape')
const yaml = require('js-yaml')
const utility = require('../lib/metadata/utility')
const {Container} = require('../lib/metadata')
const {LocaleResources} = require('../lib/locale-resources')

/** @type {MigrationContext} */
const ctx = {
  conn: null,
  langConfig: {defaultLang: 'en', supportLang: ['en', 'uk']},
  options: {silent: true},
  container: new Container({silent: true}),
  resources: new LocaleResources()
}

require('../lib/registration/cdn-metadata')(ctx.container)

test('Org Business Types', t => {
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- bus_type_1
`)),
      ctx.container.getFileType('cdn_orgbusinesstype'),
      ctx
    )),
    [
      {
        entity: 'cdn_orgbusinesstype',
        execParams: {
          code: 'bus_type_1',
          'name_en^': 'Bus Type 1',
          'name_uk^': 'Bus Type 1',
          'fullName_en^': 'Bus Type 1',
          'fullName_uk^': 'Bus Type 1',
          isGovAuthority: false
        }
      }
    ],
    'All defaults'
  )
  t.deepEquals(
    Array.from(utility.transformAndTranslate(
      utility.iterateList(yaml.safeLoad(`
- bus_type_1:
    name: Custom
`)),
      ctx.container.getFileType('cdn_orgbusinesstype'),
      ctx
    )),
    [
      {
        entity: 'cdn_orgbusinesstype',
        execParams: {
          code: 'bus_type_1',
          'name_en^': 'Custom',
          'name_uk^': 'Custom',
          'fullName_en^': 'Custom',
          'fullName_uk^': 'Custom',
          isGovAuthority: false
        }
      }
    ],
    'Full name default from name'
  )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - bus_type_1:
      name:
        en: Bus Type X
        uk: Bus Type X uk
      shortName:
        en: Bus Type X sn
        uk: Bus Type X sn uk
      fullName:
        en: Bus Type X fn
        uk: Bus Type X fn uk
      isGovAuthority: true
  `)),
        ctx.container.getFileType('cdn_orgbusinesstype'),
        ctx
      )),
      [
        {
          entity: 'cdn_orgbusinesstype',
          execParams: {
            code: 'bus_type_1',
            'name_en^': 'Bus Type X',
            'name_uk^': 'Bus Type X uk',
            'shortName_en^': 'Bus Type X sn',
            'shortName_uk^': 'Bus Type X sn uk',
            'fullName_en^': 'Bus Type X fn',
            'fullName_uk^': 'Bus Type X fn uk',
            isGovAuthority: true
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Org Ownership Types', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - own_type_1
  `)),
        ctx.container.getFileType('cdn_orgownershiptype'),
        ctx
      )),
      [
        {
          entity: 'cdn_orgownershiptype',
          execParams: {
            code: 'own_type_1',
            'name_en^': 'Own Type 1',
            'name_uk^': 'Own Type 1',
            'fullName_en^': 'Own Type 1',
            'fullName_uk^': 'Own Type 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - own_type_1:
      name: Custom
  `)),
        ctx.container.getFileType('cdn_orgownershiptype'),
        ctx
      )),
      [
        {
          entity: 'cdn_orgownershiptype',
          execParams: {
            code: 'own_type_1',
            'name_en^': 'Custom',
            'name_uk^': 'Custom',
            'fullName_en^': 'Custom',
            'fullName_uk^': 'Custom'
          }
        }
      ],
      'Full name default from name'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - own_type_1:
      name:
        en: Own Type X
        uk: Own Type X uk
      shortName:
        en: Own Type X sn
        uk: Own Type X sn uk
      fullName:
        en: Own Type X fn
        uk: Own Type X fn uk
  `)),
        ctx.container.getFileType('cdn_orgownershiptype'),
        ctx
      )),
      [
        {
          entity: 'cdn_orgownershiptype',
          execParams: {
            code: 'own_type_1',
            'name_en^': 'Own Type X',
            'name_uk^': 'Own Type X uk',
            'shortName_en^': 'Own Type X sn',
            'shortName_uk^': 'Own Type X sn uk',
            'fullName_en^': 'Own Type X fn',
            'fullName_uk^': 'Own Type X fn uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Contact Types', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - ct_type_1
  `)),
        ctx.container.getFileType('cdn_contacttype'),
        ctx
      )),
      [
        {
          entity: 'cdn_contacttype',
          execParams: {
            code: 'ct_type_1',
            'name_en^': 'Ct Type 1',
            'name_uk^': 'Ct Type 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - ct_type_1:
      name:
        en: Ct Type X
        uk: Ct Type X uk
  `)),
        ctx.container.getFileType('cdn_contacttype'),
        ctx
      )),
      [
        {
          entity: 'cdn_contacttype',
          execParams: {
            code: 'ct_type_1',
            'name_en^': 'Ct Type X',
            'name_uk^': 'Ct Type X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Department Types', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep_type_1
  `)),
        ctx.container.getFileType('cdn_deptype'),
        ctx
      )),
      [
        {
          entity: 'cdn_deptype',
          execParams: {
            code: 'dep_type_1',
            'name_en^': 'Dep Type 1',
            'name_uk^': 'Dep Type 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep_type_1:
      name:
        en: Dep Type X
        uk: Dep Type X uk
  `)),
        ctx.container.getFileType('cdn_deptype'),
        ctx
      )),
      [
        {
          entity: 'cdn_deptype',
          execParams: {
            code: 'dep_type_1',
            'name_en^': 'Dep Type X',
            'name_uk^': 'Dep Type X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Professions', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - prof_1
  `)),
        ctx.container.getFileType('cdn_profession'),
        ctx
      )),
      [
        {
          entity: 'cdn_profession',
          execParams: {
            code: 'prof_1',
            'name_en^': 'Prof 1',
            'name_uk^': 'Prof 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - prof_1:
      name:
        en: Prof X
        uk: Prof X uk
  `)),
        ctx.container.getFileType('cdn_profession'),
        ctx
      )),
      [
        {
          entity: 'cdn_profession',
          execParams: {
            code: 'prof_1',
            'name_en^': 'Prof X',
            'name_uk^': 'Prof X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Staff Unit Types', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - su_type_1
  `)),
        ctx.container.getFileType('cdn_staffunittype'),
        ctx
      )),
      [
        {
          entity: 'cdn_staffunittype',
          execParams: {
            code: 'su_type_1',
            'name_en^': 'Su Type 1',
            'name_uk^': 'Su Type 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - su_type_1:
      name:
        en: Su Type X
        uk: Su Type X uk
  `)),
        ctx.container.getFileType('cdn_staffunittype'),
        ctx
      )),
      [
        {
          entity: 'cdn_staffunittype',
          execParams: {
            code: 'su_type_1',
            'name_en^': 'Su Type X',
            'name_uk^': 'Su Type X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Corr Indexes', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - ci_1
  `)),
        ctx.container.getFileType('cdn_corrindex'),
        ctx
      )),
      [
        {
          entity: 'cdn_corrindex',
          execParams: {
            code: 'ci_1',
            'name_en^': 'Ci 1',
            'name_uk^': 'Ci 1',
            'fullName_en^': 'Ci 1',
            'fullName_uk^': 'Ci 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - ci_1:
      name: Custom
  `)),
        ctx.container.getFileType('cdn_corrindex'),
        ctx
      )),
      [
        {
          entity: 'cdn_corrindex',
          execParams: {
            code: 'ci_1',
            'name_en^': 'Custom',
            'name_uk^': 'Custom',
            'fullName_en^': 'Custom',
            'fullName_uk^': 'Custom'
          }
        }
      ],
      'Full name default from name'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - ci_1:
      name:
        en: Ci X
        uk: Ci X uk
      fullName:
        en: Ci X fn
        uk: Ci X fn uk
  `)),
        ctx.container.getFileType('cdn_corrindex'),
        ctx
      )),
      [
        {
          entity: 'cdn_corrindex',
          execParams: {
            code: 'ci_1',
            'name_en^': 'Ci X',
            'name_uk^': 'Ci X uk',
            'fullName_en^': 'Ci X fn',
            'fullName_uk^': 'Ci X fn uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Organizations', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'Org 1',
            'name_uk^': 'Org 1',
            'fullName_en^': 'Org 1',
            'fullName_uk^': 'Org 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1:
      name:
        en: This is org
        uk: Таки орг
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'This is org',
            'name_uk^': 'Таки орг',
            'fullName_en^': 'This is org',
            'fullName_uk^': 'Таки орг'
          }
        }
      ],
      'fullName default from name'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1:
      name:
        en: This is org
        uk: Таки орг
      nameGen:
        en: This is org gen
        uk: Таки орг gen
      nameDat:
        en: This is org dat
        uk: Таки орг dat
      fullName:
        en: This is org full
        uk: Таки орг full
      fullNameGen:
        en: This is org full gen
        uk: Таки орг full gen
      fullNameDat:
        en: This is org full dat
        uk: Таки орг full dat
      description:
        en: This is org description
        uk: Таки орг description
      addrText:
        en: addr en
        uk: addr uk
      OKPOCode: "1234567890"
      taxCode: "12345678"
      vatCode: vatCode1
      businessType: busType1
      ownershipType: ownType1
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'This is org',
            'name_uk^': 'Таки орг',
            'nameGen_en^': 'This is org gen',
            'nameGen_uk^': 'Таки орг gen',
            'nameDat_en^': 'This is org dat',
            'nameDat_uk^': 'Таки орг dat',
            'fullName_en^': 'This is org full',
            'fullName_uk^': 'Таки орг full',
            'fullNameGen_en^': 'This is org full gen',
            'fullNameGen_uk^': 'Таки орг full gen',
            'fullNameDat_en^': 'This is org full dat',
            'fullNameDat_uk^': 'Таки орг full dat',
            'description_en^': 'This is org description',
            'description_uk^': 'Таки орг description',
            'addrText_en^': 'addr en',
            'addrText_uk^': 'addr uk',
            OKPOCode: '1234567890',
            taxCode: '12345678',
            vatCode: 'vatCode1',
            businessType: 'busType1',
            ownershipType: 'ownType1'
          }
        }
      ],
      'Fully customized'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1:
      departments:
      - dep11
      - dep12
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'Org 1',
            'name_uk^': 'Org 1',
            'fullName_en^': 'Org 1',
            'fullName_uk^': 'Org 1'
          }
        },
        {
          entity: 'cdn_department',
          execParams: {
            organization: 'org1',
            code: 'dep11',
            'name_en^': 'Dep 11',
            'name_uk^': 'Dep 11',
            'fullName_en^': 'Dep 11',
            'fullName_uk^': 'Dep 11'
          }
        },
        {
          entity: 'cdn_department',
          execParams: {
            organization: 'org1',
            code: 'dep12',
            'name_en^': 'Dep 12',
            'name_uk^': 'Dep 12',
            'fullName_en^': 'Dep 12',
            'fullName_uk^': 'Dep 12'
          }
        }
      ],
      'Child departments'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1:
      employees:
      - emp11
      - emp12
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'Org 1',
            'name_uk^': 'Org 1',
            'fullName_en^': 'Org 1',
            'fullName_uk^': 'Org 1'
          }
        },
        {
          entity: 'cdn_employee',
          execParams: {
            organization: 'org1',
            'fullFIO_en^': 'emp11',
            'fullFIO_uk^': 'emp11',
            'shortFIO_en^': 'Emp 11',
            'shortFIO_uk^': 'Emp 11',
            'firstName_en^': 'Emp 11',
            'firstName_uk^': 'Emp 11',
            'lastName_en^': 'Emp 11',
            'lastName_uk^': 'Emp 11',
            sexType: 'FM'
          }
        },
        {
          entity: 'cdn_employee',
          execParams: {
            organization: 'org1',
            'fullFIO_en^': 'emp12',
            'fullFIO_uk^': 'emp12',
            'shortFIO_en^': 'Emp 12',
            'shortFIO_uk^': 'Emp 12',
            'firstName_en^': 'Emp 12',
            'firstName_uk^': 'Emp 12',
            'lastName_en^': 'Emp 12',
            'lastName_uk^': 'Emp 12',
            sexType: 'FM'
          }
        }
      ],
      'Child employees'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1:
      departments:
      - dep1:
          employees:
          - emp11
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'Org 1',
            'name_uk^': 'Org 1',
            'fullName_en^': 'Org 1',
            'fullName_uk^': 'Org 1'
          }
        },
        {
          entity: 'cdn_department',
          execParams: {
            organization: 'org1',
            code: 'dep1',
            'name_en^': 'Dep 1',
            'name_uk^': 'Dep 1',
            'fullName_en^': 'Dep 1',
            'fullName_uk^': 'Dep 1'
          }
        },
        {
          entity: 'cdn_employee',
          execParams: {
            organization: 'org1',
            department: 'dep1',
            'fullFIO_en^': 'emp11',
            'fullFIO_uk^': 'emp11',
            'shortFIO_en^': 'Emp 11',
            'shortFIO_uk^': 'Emp 11',
            'firstName_en^': 'Emp 11',
            'firstName_uk^': 'Emp 11',
            'lastName_en^': 'Emp 11',
            'lastName_uk^': 'Emp 11',
            sexType: 'FM'
          }
        }
      ],
      'Child employees in dep'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - org1:
      contacts:
        phone: "1234"
        email: vasyl@pupckin.com
  `)),
        ctx.container.getFileType('cdn_organization'),
        ctx
      )),
      [
        {
          entity: 'cdn_organization',
          execParams: {
            code: 'org1',
            'name_en^': 'Org 1',
            'name_uk^': 'Org 1',
            'fullName_en^': 'Org 1',
            'fullName_uk^': 'Org 1'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnOrg: 'org1',
            contactType: 'phone',
            value: '1234'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnOrg: 'org1',
            contactType: 'email',
            value: 'vasyl@pupckin.com'
          }
        }
      ],
      'Organization contacts'
    )

    t.end()
  })

  test('Departments', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep1
  `)),
        ctx.container.getFileType('cdn_department'),
        ctx
      )),
      [
        {
          entity: 'cdn_department',
          execParams: {
            code: 'dep1',
            'name_en^': 'Dep 1',
            'name_uk^': 'Dep 1',
            'fullName_en^': 'Dep 1',
            'fullName_uk^': 'Dep 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep1:
      name:
        en: This is dep
        uk: Таки dep
  `)),
        ctx.container.getFileType('cdn_department'),
        ctx
      )),
      [
        {
          entity: 'cdn_department',
          execParams: {
            code: 'dep1',
            'name_en^': 'This is dep',
            'name_uk^': 'Таки dep',
            'fullName_en^': 'This is dep',
            'fullName_uk^': 'Таки dep'
          }
        }
      ],
      'fullName default from name'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep1:
      name:
        en: This is dep
        uk: Таки dep
      nameGen:
        en: This is dep gen
        uk: Таки dep gen
      nameDat:
        en: This is dep dat
        uk: Таки dep dat
      fullName:
        en: This is dep full
        uk: Таки dep full
      fullNameGen:
        en: This is dep full gen
        uk: Таки dep full gen
      fullNameDat:
        en: This is dep full dat
        uk: Таки dep full dat
      description:
        en: This is dep description
        uk: Таки dep description
      addrText:
        en: This is addr
        uk: This is addr uk
      depType: depType1
  `)),
        ctx.container.getFileType('cdn_department'),
        ctx
      )),
      [
        {
          entity: 'cdn_department',
          execParams: {
            code: 'dep1',
            'name_en^': 'This is dep',
            'name_uk^': 'Таки dep',
            'nameGen_en^': 'This is dep gen',
            'nameGen_uk^': 'Таки dep gen',
            'nameDat_en^': 'This is dep dat',
            'nameDat_uk^': 'Таки dep dat',
            'fullName_en^': 'This is dep full',
            'fullName_uk^': 'Таки dep full',
            'fullNameGen_en^': 'This is dep full gen',
            'fullNameGen_uk^': 'Таки dep full gen',
            'fullNameDat_en^': 'This is dep full dat',
            'fullNameDat_uk^': 'Таки dep full dat',
            'description_en^': 'This is dep description',
            'description_uk^': 'Таки dep description',
            depType: 'depType1'
          }
        }
      ],
      'Fully customized'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep1:
      employees:
      - emp11
      - emp12
  `)),
        ctx.container.getFileType('cdn_department'),
        ctx
      )),
      [
        {
          entity: 'cdn_department',
          execParams: {
            code: 'dep1',
            'name_en^': 'Dep 1',
            'name_uk^': 'Dep 1',
            'fullName_en^': 'Dep 1',
            'fullName_uk^': 'Dep 1'
          }
        },
        {
          entity: 'cdn_employee',
          execParams: {
            department: 'dep1',
            'fullFIO_en^': 'emp11',
            'fullFIO_uk^': 'emp11',
            'shortFIO_en^': 'Emp 11',
            'shortFIO_uk^': 'Emp 11',
            'firstName_en^': 'Emp 11',
            'firstName_uk^': 'Emp 11',
            'lastName_en^': 'Emp 11',
            'lastName_uk^': 'Emp 11',
            sexType: 'FM'
          }
        },
        {
          entity: 'cdn_employee',
          execParams: {
            department: 'dep1',
            'fullFIO_en^': 'emp12',
            'fullFIO_uk^': 'emp12',
            'shortFIO_en^': 'Emp 12',
            'shortFIO_uk^': 'Emp 12',
            'firstName_en^': 'Emp 12',
            'firstName_uk^': 'Emp 12',
            'lastName_en^': 'Emp 12',
            'lastName_uk^': 'Emp 12',
            sexType: 'FM'
          }
        }
      ],
      'Child employees'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - dep1:
      contacts:
        phone: "1234"
        email: vasyl@pupckin.com
  `)),
        ctx.container.getFileType('cdn_department'),
        ctx
      )),
      [
        {
          entity: 'cdn_department',
          execParams: {
            code: 'dep1',
            'name_en^': 'Dep 1',
            'name_uk^': 'Dep 1',
            'fullName_en^': 'Dep 1',
            'fullName_uk^': 'Dep 1'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnDep: 'dep1',
            contactType: 'phone',
            value: '1234'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnDep: 'dep1',
            contactType: 'email',
            value: 'vasyl@pupckin.com'
          }
        }
      ],
      'Department contacts'
    )

    t.end()
  })

  test('Employees', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - emp1
  `)),
        ctx.container.getFileType('cdn_employee'),
        ctx
      )),
      [
        {
          entity: 'cdn_employee',
          execParams: {
            'fullFIO_en^': 'emp1',
            'fullFIO_uk^': 'emp1',
            'shortFIO_en^': 'Emp 1',
            'shortFIO_uk^': 'Emp 1',
            'firstName_en^': 'Emp 1',
            'firstName_uk^': 'Emp 1',
            'lastName_en^': 'Emp 1',
            'lastName_uk^': 'Emp 1',
            sexType: 'FM'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - emp1:
      firstName:
        en: This is emp firstName
        uk: Таки emp firstName
      firstNameGen:
        en: This is emp firstName gen
        uk: Таки emp firstName gen
      firstNameDat:
        en: This is emp firstName dat
        uk: Таки emp firstName dat
      firstNameObj:
        en: This is emp firstName obj
        uk: Таки emp firstName obj
      middleName:
        en: This is emp middleName
        uk: Таки emp middleName
      middleNameGen:
        en: This is emp middleName gen
        uk: Таки emp middleName gen
      middleNameDat:
        en: This is emp middleName dat
        uk: Таки emp middleName dat
      middleNameObj:
        en: This is emp middleName obj
        uk: Таки emp middleName obj
      lastName:
        en: This is emp lastName
        uk: Таки emp lastName
      lastNameGen:
        en: This is emp lastName gen
        uk: Таки emp lastName gen
      lastNameDat:
        en: This is emp lastName dat
        uk: Таки emp lastName dat
      shortFIO:
        en: This is emp shortFIO
        uk: Таки emp shortFIO
      shortFIOGen:
        en: This is emp shortFIO gen
        uk: Таки emp shortFIO gen
      shortFIODat:
        en: This is emp shortFIO dat
        uk: Таки emp shortFIO dat
      fullFIOGen:
        en: This is emp fullFIO gen
        uk: Таки emp fullFIO gen
      fullFIODat:
        en: This is emp fullFIO dat
        uk: Таки emp fullFIO dat
      apply:
        en: This is emp apply
        uk: Таки emp apply
      applyGen:
        en: This is emp apply gen
        uk: Таки emp apply gen
      applyDat:
        en: This is emp apply dat
        uk: Таки emp apply dat
      description:
        en: This is emp description
        uk: Таки emp description
      addrText:
        en: Addr
        uk: Addr uk
      suffix:
        en: This is emp suffix
        uk: Таки emp suffix
      uniqNum: "1234"
      sexType: F
  `)),
        ctx.container.getFileType('cdn_employee'),
        ctx
      )),
      [
        {
          entity: 'cdn_employee',
          execParams: {
            'firstName_en^': 'This is emp firstName',
            'firstName_uk^': 'Таки emp firstName',
            'firstNameGen_en^': 'This is emp firstName gen',
            'firstNameGen_uk^': 'Таки emp firstName gen',
            'firstNameDat_en^': 'This is emp firstName dat',
            'firstNameDat_uk^': 'Таки emp firstName dat',
            'middleName_en^': 'This is emp middleName',
            'middleName_uk^': 'Таки emp middleName',
            'middleNameGen_en^': 'This is emp middleName gen',
            'middleNameGen_uk^': 'Таки emp middleName gen',
            'middleNameDat_en^': 'This is emp middleName dat',
            'middleNameDat_uk^': 'Таки emp middleName dat',
            'lastName_en^': 'This is emp lastName',
            'lastName_uk^': 'Таки emp lastName',
            'lastNameGen_en^': 'This is emp lastName gen',
            'lastNameGen_uk^': 'Таки emp lastName gen',
            'lastNameDat_en^': 'This is emp lastName dat',
            'lastNameDat_uk^': 'Таки emp lastName dat',
            'shortFIO_en^': 'This is emp shortFIO',
            'shortFIO_uk^': 'Таки emp shortFIO',
            'shortFIOGen_en^': 'This is emp shortFIO gen',
            'shortFIOGen_uk^': 'Таки emp shortFIO gen',
            'shortFIODat_en^': 'This is emp shortFIO dat',
            'shortFIODat_uk^': 'Таки emp shortFIO dat',
            'fullFIO_en^': 'emp1',
            'fullFIO_uk^': 'emp1',
            'fullFIOGen_en^': 'This is emp fullFIO gen',
            'fullFIOGen_uk^': 'Таки emp fullFIO gen',
            'fullFIODat_en^': 'This is emp fullFIO dat',
            'fullFIODat_uk^': 'Таки emp fullFIO dat',
            'apply_en^': 'This is emp apply',
            'apply_uk^': 'Таки emp apply',
            'applyGen_en^': 'This is emp apply gen',
            'applyGen_uk^': 'Таки emp apply gen',
            'applyDat_en^': 'This is emp apply dat',
            'applyDat_uk^': 'Таки emp apply dat',
            'description_en^': 'This is emp description',
            'description_uk^': 'Таки emp description',
            'addrText_en^': 'Addr',
            'addrText_uk^': 'Addr uk',
            'suffix_en^': 'This is emp suffix',
            'suffix_uk^': 'Таки emp suffix',
            sexType: 'F',
            uniqNum: '1234'
          }
        }
      ],
      'Fully customized'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - emp1:
      contacts:
        phone: "1234"
        email: vasyl@pupckin.com
  `)),
        ctx.container.getFileType('cdn_employee'),
        ctx
      )),
      [
        {
          entity: 'cdn_employee',
          execParams: {
            'fullFIO_en^': 'emp1',
            'fullFIO_uk^': 'emp1',
            'shortFIO_en^': 'Emp 1',
            'shortFIO_uk^': 'Emp 1',
            'firstName_en^': 'Emp 1',
            'firstName_uk^': 'Emp 1',
            'lastName_en^': 'Emp 1',
            'lastName_uk^': 'Emp 1',
            sexType: 'FM'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnEmp: 'emp1',
            contactType: 'phone',
            value: '1234'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnEmp: 'emp1',
            contactType: 'email',
            value: 'vasyl@pupckin.com'
          }
        }
      ],
      'Employee contacts'
    )

    t.end()
  })

  test('Person Categories', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - per_cat
  `)),
        ctx.container.getFileType('cdn_personcategory'),
        ctx
      )),
      [
        {
          entity: 'cdn_personcategory',
          execParams: {
            code: 'per_cat',
            'name_en^': 'Per Cat',
            'name_uk^': 'Per Cat'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - per_cat:
      name:
        en: Per Cat X
        uk: Per Cat X uk
  `)),
        ctx.container.getFileType('cdn_personcategory'),
        ctx
      )),
      [
        {
          entity: 'cdn_personcategory',
          execParams: {
            code: 'per_cat',
            'name_en^': 'Per Cat X',
            'name_uk^': 'Per Cat X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Person Social Statuses', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - soc_stat
  `)),
        ctx.container.getFileType('cdn_personsocialstatus'),
        ctx
      )),
      [
        {
          entity: 'cdn_personsocialstatus',
          execParams: {
            code: 'soc_stat',
            'name_en^': 'Soc Stat',
            'name_uk^': 'Soc Stat'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - soc_stat:
      name:
        en: Soc Stat X
        uk: Soc Stat X uk
  `)),
        ctx.container.getFileType('cdn_personsocialstatus'),
        ctx
      )),
      [
        {
          entity: 'cdn_personsocialstatus',
          execParams: {
            code: 'soc_stat',
            'name_en^': 'Soc Stat X',
            'name_uk^': 'Soc Stat X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Person Classes', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - per_cls
  `)),
        ctx.container.getFileType('cdn_personclass'),
        ctx
      )),
      [
        {
          entity: 'cdn_personclass',
          execParams: {
            code: 'per_cls',
            'name_en^': 'Per Cls',
            'name_uk^': 'Per Cls'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - per_cls:
      name:
        en: Per Cls X
        uk: Per Cls X uk
  `)),
        ctx.container.getFileType('cdn_personclass'),
        ctx
      )),
      [
        {
          entity: 'cdn_personclass',
          execParams: {
            code: 'per_cls',
            'name_en^': 'Per Cls X',
            'name_uk^': 'Per Cls X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Nationalities', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - nat1
  `)),
        ctx.container.getFileType('cdn_nationality'),
        ctx
      )),
      [
        {
          entity: 'cdn_nationality',
          execParams: {
            code: 'nat1',
            'name_en^': 'Nat 1',
            'name_uk^': 'Nat 1',
            'nameM_en^': 'Nat 1',
            'nameM_uk^': 'Nat 1',
            'nameF_en^': 'Nat 1',
            'nameF_uk^': 'Nat 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - nat1:
      name:
        en: Nat X
        uk: Nat X uk
      nameM:
        en: NatM X
        uk: NatM X uk
      nameF:
        en: NatF X
        uk: NatF X uk
  `)),
        ctx.container.getFileType('cdn_nationality'),
        ctx
      )),
      [
        {
          entity: 'cdn_nationality',
          execParams: {
            code: 'nat1',
            'name_en^': 'Nat X',
            'name_uk^': 'Nat X uk',
            'nameM_en^': 'NatM X',
            'nameM_uk^': 'NatM X uk',
            'nameF_en^': 'NatF X',
            'nameF_uk^': 'NatF X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Region Types', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - reg_type
  `)),
        ctx.container.getFileType('cdn_regiontype'),
        ctx
      )),
      [
        {
          entity: 'cdn_regiontype',
          execParams: {
            code: 'reg_type',
            'name_en^': 'Reg Type',
            'name_uk^': 'Reg Type'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - reg_type:
      name:
        en: Reg Type X
        uk: Reg Type X uk
  `)),
        ctx.container.getFileType('cdn_regiontype'),
        ctx
      )),
      [
        {
          entity: 'cdn_regiontype',
          execParams: {
            code: 'reg_type',
            'name_en^': 'Reg Type X',
            'name_uk^': 'Reg Type X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('City Types', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - city_type
  `)),
        ctx.container.getFileType('cdn_citytype'),
        ctx
      )),
      [
        {
          entity: 'cdn_citytype',
          execParams: {
            code: 'city_type',
            'name_en^': 'City Type',
            'name_uk^': 'City Type'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - city_type:
      name:
        en: City Type X
        uk: City Type X uk
  `)),
        ctx.container.getFileType('cdn_citytype'),
        ctx
      )),
      [
        {
          entity: 'cdn_citytype',
          execParams: {
            code: 'city_type',
            'name_en^': 'City Type X',
            'name_uk^': 'City Type X uk'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Cities', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - city_1
  `)),
        ctx.container.getFileType('cdn_city'),
        ctx
      )),
      [
        {
          entity: 'cdn_city',
          execParams: {
            code: 'city_1',
            'name_en^': 'City 1',
            'name_uk^': 'City 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - city_1:
      name:
        en: City 1 X
        uk: City 1 X uk
      description:
        en: City 1 Desc X
        uk: City 1 Desc X uk
      phoneCode: "0123"
      postalCode: "12345"
      parent: reg1
      cityType: big_city
  `)),
        ctx.container.getFileType('cdn_city'),
        ctx
      )),
      [
        {
          entity: 'cdn_city',
          execParams: {
            code: 'city_1',
            'name_en^': 'City 1 X',
            'name_uk^': 'City 1 X uk',
            'description_en^': 'City 1 Desc X',
            'description_uk^': 'City 1 Desc X uk',
            phoneCode: '0123',
            postalCode: '12345',
            parent: 'reg1',
            cityType: 'big_city'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Regions', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - reg_1
  `)),
        ctx.container.getFileType('cdn_region'),
        ctx
      )),
      [
        {
          entity: 'cdn_region',
          execParams: {
            code: 'reg_1',
            'name_en^': 'Reg 1',
            'name_uk^': 'Reg 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - reg_1:
      name:
        en: Reg 1 X
        uk: Reg 1 X uk
      fullName:
        en: Reg 1 Full X
        uk: Reg 1 Full X uk
      description:
        en: Reg 1 Desc X
        uk: Reg 1 Desc X uk
      phoneCode: "0123"
      parent: parent_reg1
      regionType: big_reg
  `)),
        ctx.container.getFileType('cdn_region'),
        ctx
      )),
      [
        {
          entity: 'cdn_region',
          execParams: {
            code: 'reg_1',
            'name_en^': 'Reg 1 X',
            'name_uk^': 'Reg 1 X uk',
            'fullName_en^': 'Reg 1 Full X',
            'fullName_uk^': 'Reg 1 Full X uk',
            'description_en^': 'Reg 1 Desc X',
            'description_uk^': 'Reg 1 Desc X uk',
            phoneCode: '0123',
            parent: 'parent_reg1',
            regionType: 'big_reg'
          }
        }
      ],
      'All custom'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - reg_1:
      cities:
      - city1
      - city2
  `)),
        ctx.container.getFileType('cdn_region'),
        ctx
      )),
      [
        {
          entity: 'cdn_region',
          execParams: {
            code: 'reg_1',
            'name_en^': 'Reg 1',
            'name_uk^': 'Reg 1'
          }
        },
        {
          entity: 'cdn_city',
          execParams: {
            code: 'city1',
            parent: 'reg_1',
            'name_en^': 'City 1',
            'name_uk^': 'City 1'
          }
        },
        {
          entity: 'cdn_city',
          execParams: {
            code: 'city2',
            parent: 'reg_1',
            'name_en^': 'City 2',
            'name_uk^': 'City 2'
          }
        }
      ],
      'Region with cities'
    )

    t.end()
  })

  test('Currencies', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
    - currency_1
    `)),
        ctx.container.getFileType('cdn_currency'),
        ctx
      )),
      [
        {
          entity: 'cdn_currency',
          execParams: {
            code3: 'currency_1',
            'name_en^': 'Currency 1',
            'name_uk^': 'Currency 1',
            curMult: 100
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
    - currency_1:
        name:
          en: Currency 1 X
          uk: Currency 1 X uk
        description:
          en: Currency 1 Desc X
          uk: Currency 1 Desc X uk
        intCode: 123
        curMult: 1000
    `)),
        ctx.container.getFileType('cdn_currency'),
        ctx
      )),
      [
        {
          entity: 'cdn_currency',
          execParams: {
            code3: 'currency_1',
            intCode: 123,
            curMult: 1000,
            'name_en^': 'Currency 1 X',
            'name_uk^': 'Currency 1 X uk',
            'description_en^': 'Currency 1 Desc X',
            'description_uk^': 'Currency 1 Desc X uk',
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Countries', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
      - country_1
      `)),
        ctx.container.getFileType('cdn_country'),
        ctx
      )),
      [
        {
          entity: 'cdn_country',
          execParams: {
            code: 'country_1',
            'name_en^': 'Country 1',
            'name_uk^': 'Country 1'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
      - country_1:
          name:
            en: Country 1 X
            uk: Country 1 X uk
          fullName:
            en: Country 1 FN X
            uk: Country 1 FN X uk
          description:
            en: Country 1 Desc X
            uk: Country 1 Desc X uk
          intCode: 123
          symbol2: c1
          symbol3: c01
          phoneCode: "+38"
          currency: cur1
          capital: capitalCode
      `)),
        ctx.container.getFileType('cdn_country'),
        ctx
      )),
      [
        {
          entity: 'cdn_country',
          execParams: {
            code: 'country_1',
            symbol2: 'c1',
            symbol3: 'c01',
            intCode: 123,
            phoneCode: '+38',
            'name_en^': 'Country 1 X',
            'name_uk^': 'Country 1 X uk',
            'fullName_en^': 'Country 1 FN X',
            'fullName_uk^': 'Country 1 FN X uk',
            'description_en^': 'Country 1 Desc X',
            'description_uk^': 'Country 1 Desc X uk',
            currency: 'cur1',
            capital: 'capitalCode'
          }
        }
      ],
      'All custom'
    )

    t.end()
  })

  test('Persons', t => {
    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - Per 1
  `)),
        ctx.container.getFileType('cdn_person'),
        ctx
      )),
      [
        {
          entity: 'cdn_person',
          execParams: {
            'lastName_en^': 'Per 1',
            'lastName_uk^': 'Per 1',
            'firstName_en^': 'Per 1',
            'firstName_uk^': 'Per 1',
            'fullFIO_en^': 'Per 1',
            'fullFIO_uk^': 'Per 1',
            sexType: 'FM'
          }
        }
      ],
      'All defaults'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - Per 1:
      firstName:
        en: This is firstName
        uk: Таки firstName
      firstNameGen:
        en: This is firstName gen
        uk: Таки firstName gen
      firstNameDat:
        en: This is firstName dat
        uk: Таки firstName dat
      firstNameObj:
        en: This is firstName obj
        uk: Таки firstName obj
      middleName:
        en: This is middleName
        uk: Таки middleName
      middleNameGen:
        en: This is middleName gen
        uk: Таки middleName gen
      middleNameDat:
        en: This is middleName dat
        uk: Таки middleName dat
      middleNameObj:
        en: This is middleName obj
        uk: Таки middleName obj
      lastName:
        en: This is lastName
        uk: Таки lastName
      lastNameGen:
        en: This is lastName gen
        uk: Таки lastName gen
      lastNameDat:
        en: This is lastName dat
        uk: Таки lastName dat
      shortFIO:
        en: This is shortFIO
        uk: Таки shortFIO
      shortFIOGen:
        en: This is shortFIO gen
        uk: Таки shortFIO gen
      shortFIODat:
        en: This is shortFIO dat
        uk: Таки shortFIO dat
      fullFIOGen:
        en: This is fullFIO gen
        uk: Таки fullFIO gen
      fullFIODat:
        en: This is fullFIO dat
        uk: Таки fullFIO dat
      apply:
        en: This is apply
        uk: Таки apply
      applyGen:
        en: This is apply gen
        uk: Таки apply gen
      applyDat:
        en: This is apply dat
        uk: Таки apply dat
      identCard:
        en: ID
        uk: ID uk
      workPlacePos:
        en: Work Pos
        uk: Work Pos uk
      uniqNum: "1234"
      sexType: F
  `)),
        ctx.container.getFileType('cdn_person'),
        ctx
      )),
      [
        {
          entity: 'cdn_person',
          execParams: {
            'firstName_en^': 'This is firstName',
            'firstName_uk^': 'Таки firstName',
            'firstNameGen_en^': 'This is firstName gen',
            'firstNameGen_uk^': 'Таки firstName gen',
            'firstNameDat_en^': 'This is firstName dat',
            'firstNameDat_uk^': 'Таки firstName dat',
            'middleName_en^': 'This is middleName',
            'middleName_uk^': 'Таки middleName',
            'middleNameGen_en^': 'This is middleName gen',
            'middleNameGen_uk^': 'Таки middleName gen',
            'middleNameDat_en^': 'This is middleName dat',
            'middleNameDat_uk^': 'Таки middleName dat',
            'lastName_en^': 'This is lastName',
            'lastName_uk^': 'Таки lastName',
            'lastNameGen_en^': 'This is lastName gen',
            'lastNameGen_uk^': 'Таки lastName gen',
            'lastNameDat_en^': 'This is lastName dat',
            'lastNameDat_uk^': 'Таки lastName dat',
            'shortFIO_en^': 'This is shortFIO',
            'shortFIO_uk^': 'Таки shortFIO',
            'shortFIOGen_en^': 'This is shortFIO gen',
            'shortFIOGen_uk^': 'Таки shortFIO gen',
            'shortFIODat_en^': 'This is shortFIO dat',
            'shortFIODat_uk^': 'Таки shortFIO dat',
            'fullFIO_en^': 'Per 1',
            'fullFIO_uk^': 'Per 1',
            'fullFIOGen_en^': 'This is fullFIO gen',
            'fullFIOGen_uk^': 'Таки fullFIO gen',
            'fullFIODat_en^': 'This is fullFIO dat',
            'fullFIODat_uk^': 'Таки fullFIO dat',
            'apply_en^': 'This is apply',
            'apply_uk^': 'Таки apply',
            'applyGen_en^': 'This is apply gen',
            'applyGen_uk^': 'Таки apply gen',
            'applyDat_en^': 'This is apply dat',
            'applyDat_uk^': 'Таки apply dat',
            'identCard_en^': 'ID',
            'identCard_uk^': 'ID uk',
            'workPlacePos_en^': 'Work Pos',
            'workPlacePos_uk^': 'Work Pos uk',
            sexType: 'F'
          }
        }
      ],
      'Fully customized'
    )

    t.deepEquals(
      Array.from(utility.transformAndTranslate(
        utility.iterateList(yaml.safeLoad(`
  - per1:
      contacts:
        phone: "1234"
        email: vasyl@pupckin.com
  `)),
        ctx.container.getFileType('cdn_person'),
        ctx
      )),
      [
        {
          entity: 'cdn_person',
          execParams: {
            'firstName_en^': 'per1',
            'firstName_uk^': 'per1',
            'lastName_en^': 'per1',
            'lastName_uk^': 'per1',
            'fullFIO_en^': 'per1',
            'fullFIO_uk^': 'per1',
            sexType: 'FM'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnPer: 'per1',
            contactType: 'phone',
            value: '1234'
          }
        },
        {
          entity: 'cdn_contact',
          execParams: {
            cdnPer: 'per1',
            contactType: 'email',
            value: 'vasyl@pupckin.com'
          }
        }
      ],
      'Employee contacts'
    )
  t.end()
})
