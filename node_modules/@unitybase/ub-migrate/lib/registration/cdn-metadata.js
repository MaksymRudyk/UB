const {codeToName} = require('../metadata/utility')
const {contactsChild} = require('./contacts')
const {EntityRepository, NonCachedEntityRepository, EntityFormat} = require('../metadata')

/**
 * @param {Container} container
 */
module.exports = function (container) {
  container.registerFileType(
    'cdn_orgbusinesstype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .defaultValue('isGovAuthority', false)
      .copy('shortName', 'fullName', 'isGovAuthority')
      .wrapAsEntity('cdn_orgbusinesstype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_orgbusinesstype',
      ['code'],
      ['isGovAuthority'],
      ['name', 'shortName', 'fullName']
    )
  )

  container.registerFileType(
    'cdn_orgownershiptype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .copy('shortName', 'fullName')
      .wrapAsEntity('cdn_orgownershiptype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_orgownershiptype',
      ['code'],
      undefined,
      ['name', 'shortName', 'fullName']
    )
  )

  container.registerFileType(
    'cdn_contacttype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_contacttype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_contacttype',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_deptype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_deptype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_deptype',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_profession',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_profession')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_profession',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_staffunittype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_staffunittype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_staffunittype',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_contact',
      ['subjectID', 'contactTypeID'],
      ['value'],
      undefined,
      [
        {
          repository: 'cdn_contacttype',
          attributes: ['contactType'],
          targetAttribute: 'contactTypeID'
        }
      ]
    )
  )

  container.registerFileType(
    'cdn_corrindex',
    new EntityFormat()
      .key('code')
      .caption('name')
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .copy('shortName', 'fullName')
      .wrapAsEntity('cdn_corrindex')
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_corrindex',
      ['code'],
      undefined,
      ['name', 'fullName']
    )
  )

  container.registerFileType(
    'cdn_employee',
    new EntityFormat()
      .key('fullFIO')
      .defaultValue('lastName', obj => codeToName(obj.fullFIO))
      .defaultValue('shortFIO', obj => codeToName(obj.fullFIO))
      .defaultValue('firstName', obj => codeToName(obj.fullFIO))
      .defaultValue('sexType', 'FM')
      .copy(
        'sexType', 'uniqNum',
        'firstName', 'firstNameGen', 'firstNameDat',
        'lastName', 'lastNameGen', 'lastNameDat',
        'middleName', 'middleNameGen', 'middleNameDat',
        'shortFIO', 'shortFIOGen', 'shortFIODat',
        'fullFIOGen', 'fullFIODat',
        'apply', 'applyGen', 'applyDat',
        'description', 'suffix', 'addrText'
      )
      .fromContext('organization', 'department')
      .child('contacts', contactsChild('cdnEmp', 'fullFIO_en^'))
      .wrapAsEntity('cdn_employee')
  )

  container.registerFileType(
    'cdn_department',
    new EntityFormat()
      .key('code')
      .caption('name')
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .copy(
        'depType',
        'nameGen', 'nameDat',
        'fullName', 'fullNameGen', 'fullNameDat',
        'description'
      )
      .fromContext('organization')
      .child(
        'employees',
        {
          context: {
            department: 'code',
            organization: 'organization'
          },
          metadata: container.getFileType('cdn_employee')
        }
      )
      .child('contacts', contactsChild('cdnDep'))
      .wrapAsEntity('cdn_department')
  )

  container.registerFileType(
    'cdn_organization',
    new EntityFormat()
      .key('code')
      .caption('name')
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .copy(
        'OKPOCode', 'taxCode', 'vatCode',
        'businessType', 'ownershipType', 'corrIndex',
        'nameGen', 'nameDat',
        'fullName', 'fullNameGen', 'fullNameDat',
        'description', 'addrText'
      )
      .child(
        'departments',
        {
          context: {organization: 'code'},
          metadata: container.getFileType('cdn_department')
        }
      )
      .child(
        'employees',
        {
          context: {organization: 'code'},
          metadata: container.getFileType('cdn_employee')
        }
      )
      .child('contacts', contactsChild('cdnOrg'))
      .wrapAsEntity('cdn_organization')
  )

  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_organization',
      ['code'],
      ['OKPOCode', 'taxCode', 'vatCode'],
      [
        'name', 'nameGen', 'nameDat',
        'fullName', 'fullNameGen', 'fullNameDat',
        'description', 'addrText'
      ],
      [
        {
          repository: 'cdn_orgbusinesstype',
          attributes: ['businessType'],
          targetAttribute: 'orgBusinessTypeID'
        },
        {
          repository: 'cdn_orgownershiptype',
          attributes: ['ownershipType'],
          targetAttribute: 'orgOwnershipTypeID'
        },
        {
          repository: 'cdn_corrindex',
          attributes: ['corrIndex'],
          targetAttribute: 'corrIndexID'
        }
      ]
    )
  )
  container.getRepository('cdn_contact').registerLookup({
    repository: 'cdn_organization',
    attributes: ['cdnOrg'],
    targetAttribute: 'subjectID'
  })

  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_department',
      ['code'],
      [],
      [
        'name', 'nameGen', 'nameDat',
        'fullName', 'fullNameGen', 'fullNameDat',
        'description'
      ],
      [
        {
          repository: 'cdn_organization',
          attributes: ['organization'],
          targetAttribute: 'organizationID'
        },
        {
          repository: 'cdn_deptype',
          attributes: ['depType'],
          targetAttribute: 'depTypeID'
        }
      ]
    )
  )
  container.getRepository('cdn_contact').registerLookup({
    repository: 'cdn_department',
    attributes: ['cdnDep'],
    targetAttribute: 'subjectID'
  })

  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_employee',
      [],
      ['sexType', 'uniqNum'],
      [
        'firstName', 'firstNameGen', 'firstNameDat',
        'lastName', 'lastNameGen', 'lastNameDat',
        'middleName', 'middleNameGen', 'middleNameDat',
        'shortFIO', 'shortFIOGen', 'shortFIODat',
        'fullFIO', 'fullFIOGen', 'fullFIODat',
        'apply', 'applyGen', 'applyDat',
        'description', 'addrText',
        'suffix'
      ],
      [
        {
          repository: 'cdn_organization',
          attributes: ['organization'],
          targetAttribute: 'organizationID'
        },
        {
          repository: 'cdn_department',
          attributes: ['department'],
          targetAttribute: 'departmentID'
        }
      ]
    )
  )
  container.getRepository('cdn_contact').registerLookup({
    repository: 'cdn_employee',
    attribute: 'cdnEmp',
    targetAttribute: 'subjectID'
  })

  container.registerFileType(
    'cdn_personcategory',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_personcategory')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_personcategory',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_personclass',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_personclass')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_personclass',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_personsocialstatus',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_personsocialstatus')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_personsocialstatus',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_regiontype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_regiontype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_regiontype',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_citytype',
    new EntityFormat()
      .key('code')
      .caption('name')
      .wrapAsEntity('cdn_citytype')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_citytype',
      ['code'],
      undefined,
      ['name']
    )
  )

  container.registerFileType(
    'cdn_nationality',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy('nameF', 'nameM')
      .defaultValue('nameF', obj => obj.name || codeToName(obj.code))
      .defaultValue('nameM', obj => obj.name || codeToName(obj.code))
      .wrapAsEntity('cdn_nationality')
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_nationality',
      ['code'],
      undefined,
      ['name', 'nameF', 'nameM']
    )
  )

  container.registerRepository(
    new EntityRepository(
      'cdn_adminunit',
      ['code'],
      ['adminUnitType'],
      ['name', 'fullName'],
      [
        {repository: '$self', attribute: 'parent', targetAttribute: 'parentAdminUnitID'}
      ]
    )
  )

  container.registerFileType(
    'cdn_city',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy(
        'description',
        'phoneCode', 'postalCode',
        'parent', 'cityType'
      )
      .fromContext('parent')
      .wrapAsEntity('cdn_city')
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_city',
      ['code'],
      ['phoneCode', 'postalCode'],
      ['name', 'description'],
      [
        {
          repository: 'cdn_adminunit',
          attributes: ['parent'],
          targetAttribute: 'parentAdminUnitID'
        },
        {
          repository: 'cdn_citytype',
          attributes: ['cityType'],
          targetAttribute: 'cityTypeID'
        }
      ]
    )
  )

  container.registerFileType(
    'cdn_region',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy(
        'fullName', 'description',
        'phoneCode',
        'parent', 'regionType', 'center'
      )
      .fromContext('parent')
      .child(
        'cities',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('cdn_city')
        }
      )
      .wrapAsEntity('cdn_region')
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_region',
      ['code'],
      ['phoneCode'],
      ['name', 'fullName', 'description'],
      [
        {
          repository: 'cdn_adminunit',
          attributes: ['parent'],
          targetAttribute: 'parentAdminUnitID'
        },
        {
          repository: 'cdn_regiontype',
          attributes: ['regionType'],
          targetAttribute: 'regionTypeID'
        },
        {
          repository: 'cdn_city',
          attributes: ['center'],
          targetAttribute: 'centerID'
        }
      ]
    )
  )

  container.registerFileType(
    'cdn_currency',
    new EntityFormat()
      .key('code3')
      .caption('name')
      .defaultValue('curMult', 100)
      .copy('intCode', 'curMult', 'description')
      .wrapAsEntity('cdn_currency')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_currency',
      ['code3'],
      ['intCode', 'curMult'],
      ['name', 'description']
    )
  )

  container.registerFileType(
    'cdn_country',
    new EntityFormat()
      .key('code')
      .caption('name')
      .defaultValue('fullName', val => val.name)
      .copy('fullName', 'description', 'intCode', 'symbol2', 'symbol3', 'phoneCode', 'currency', 'capital')
      .wrapAsEntity('cdn_country')
  )
  container.registerRepository(
    new EntityRepository(
      'cdn_country',
      ['code'],
      ['intCode', 'symbol2', 'symbol3', 'phoneCode'],
      ['name', 'fullName', 'description'],
      [
        {
          repository: 'cdn_currency',
          attributes: ['currency'],
          targetAttribute: 'currencyID'
        },
        {
          repository: 'cdn_city',
          attributes: ['capital'],
          targetAttribute: 'capitalID'
        }
      ]
    )
  )

  container.registerFileType(
    'cdn_person',
    new EntityFormat()
      .key('fullFIO')
      .defaultValue('lastName', obj => obj.lastName || obj.fullFIO)
      .defaultValue('sexType', 'FM')
      .copy(
        'birthDate', 'sexType', 'resident',
        'socialStatus', 'category', 'nationality', 'class', 'region',
        'firstName', 'firstNameGen', 'firstNameDat',
        'lastName', 'lastNameGen', 'lastNameDat',
        'middleName', 'middleNameGen', 'middleNameDat',
        'shortFIO', 'shortFIOGen', 'shortFIODat',
        'fullFIOGen', 'fullFIODat',
        'apply', 'applyGen', 'applyDat',
        'suffix',
        'identCard', 'workPlacePos'
      )
      .defaultValue('firstName', obj => obj.firstName || obj.fullFIO)
      .child(
        'cities',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('cdn_city')
        }
      )
      .child('contacts', contactsChild('cdnPer', 'fullFIO_en^'))
      .wrapAsEntity('cdn_person')
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'cdn_person',
      [],
      ['birthDate', 'sexType', 'resident'],
      [
        'firstName', 'firstNameGen', 'firstNameDat',
        'lastName', 'lastNameGen', 'lastNameDat',
        'middleName', 'middleNameGen', 'middleNameDat',
        'shortFIO', 'shortFIOGen', 'shortFIODat',
        'fullFIO', 'fullFIOGen', 'fullFIODat',
        'apply', 'applyGen', 'applyDat',
        'suffix',
        'identCard', 'workPlacePos'
      ],
      [
        {
          repository: 'cdn_personsocialstatus',
          attributes: ['socialStatus'],
          targetAttribute: 'socialstatusID'
        },
        {
          repository: 'cdn_personcategory',
          attributes: ['category'],
          targetAttribute: 'categoryID'
        },
        {
          repository: 'cdn_nationality',
          attributes: ['nationality'],
          targetAttribute: 'nationality'
        },
        {
          repository: 'cdn_personclass',
          attributes: ['class'],
          targetAttribute: 'classID'
        },
        {
          repository: 'cdn_region',
          attributes: ['region'],
          targetAttribute: 'regionID'
        }
      ]
    )
  )
  container.getRepository('cdn_contact').registerLookup({
    repository: 'cdn_person',
    attribute: 'cdnPer',
    targetAttribute: 'subjectID'
  })
}
