const {contactsChild} = require('./contacts')
const {codeToName} = require('../metadata/utility')
const {EntityRepository, NonCachedEntityRepository, EntityFormat} = require('../metadata')

/**
 * @param {Container} container
 */
module.exports = function (container) {
  container.registerFileType(
    'org_profession',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy('nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat')
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .wrapAsEntity('org_profession')
  )
  container.registerRepository(
    new EntityRepository(
      'org_profession',
      ['code'],
      undefined,
      ['name', 'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat']
    )
  )

  container.registerFileType(
    'org_employeeonstaff',
    new EntityFormat()
      .key('tabNo')
      .copy(
        'description',
        'employeeOnStaffType', 'staffunit', 'employee'
      )
      .defaultValue('employeeOnStaffType', 'PERMANENT')
      .fromContext('staffunit', 'employee')
      .wrapAsEntity('org_employeeonstaff')
  )

  container.registerFileType(
    'org_employee',
    new EntityFormat()
      .key('code')
      .caption('fullFIO')
      .copy(
        'firstName', 'firstNameGen', 'firstNameDat', 'firstNameObj',
        'lastName', 'lastNameGen', 'lastNameDat', 'lastNameObj',
        'middleName', 'middleNameGen', 'middleNameDat', 'middleNameObj',
        'shortFIO', 'shortFIOGen', 'shortFIODat', 'shortFIOObj',
        'fullFIOGen', 'fullFIODat', 'fullFIOObj',
        'apply', 'applyGen', 'applyDat', 'applyObj',
        'description', 'suffix',
        'user', 'birthDate', 'sexType'
      )
      .defaultValue('lastName', obj => obj.fullFIO || codeToName(obj.code))
      .defaultValue('firstName', obj => obj.fullFIO || codeToName(obj.code))
      .defaultValue('sexType', 'FM')
      .defaultValue('user', obj => obj.code)
      .child(
        'staff',
        {
          context: {employee: 'code'},
          metadata: container.getFileType('org_employeeonstaff')
        }
      )
      .child('contacts', contactsChild('employee'))
      .wrapAsEntity('org_employee')
  )

  container.registerFileType(
    'org_staffunit',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy(
        'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat', 'description',
        'subordinationLevel', 'isBoss',
        'profession', 'type'
      )
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .fromContext('parent')
      .child(
        'employees',
        {
          context: {staffunit: 'code'},
          metadata: container.getFileType('org_employeeonstaff')
        }
      )
      .child('contacts', contactsChild('orgUnit'))
      .wrapAsEntity('org_staffunit')
  )

  container.registerFileType(
    'org_execgroup',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy(
        'nameGen', 'nameDat',
        'parent'
      )
      .fromContext('parent')
      .child(
        'members',
        {
          context: {execGroup: 'code'},
          metadata: new EntityFormat()
            .key('orgUnit')
            .fromContext('execGroup')
            .wrapAsEntity('org_execgroupmember')
        }
      )
      .wrapAsEntity('org_execgroup')
  )

  container.registerFileType(
    'org_department',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy(
        'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat', 'description',
        'depType', 'isClerical'
      )
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .fromContext('parent')
      .child(
        'departments',
        {
          context: {parent: 'code'},
          metadata: '$self'
        }
      )
      .child('contacts', contactsChild('orgUnit'))
      .child(
        'staff',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('org_staffunit')
        }
      )
      .child(
        'execGroups',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('org_execgroup')
        }
      )
      .wrapAsEntity('org_department')
  )

  container.registerFileType(
    'org_organization',
    new EntityFormat()
      .key('code')
      .caption('name')
      .copy(
        'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat', 'description',
        'OKPOCode', 'taxCode', 'vatCode',
        'businessType', 'ownershipType'
      )
      .defaultValue('fullName', obj => obj.name || codeToName(obj.code))
      .fromContext('parent')
      .child(
        'organizations',
        {
          context: {parent: 'code'},
          metadata: '$self'
        }
      )
      .child(
        'departments',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('org_department')
        }
      )
      .child(
        'staff',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('org_staffunit')
        }
      )
      .child(
        'execGroups',
        {
          context: {parent: 'code'},
          metadata: container.getFileType('org_execgroup')
        }
      )
      .child('contacts', contactsChild('orgUnit'))
      .wrapAsEntity('org_organization')
  )

  container.registerRepository(new NonCachedEntityRepository(
    'org_unit',
    ['code'],
    ['unitType'],
    ['caption'],
    [
      {repository: '$self', attribute: 'parent', targetAttribute: 'parentID'}
    ]
  ))
  container.getRepository('cdn_contact').registerLookup({
    repository: 'org_unit',
    attribute: 'orgUnit',
    targetAttribute: 'subjectID'
  })

  container.registerRepository(
    new EntityRepository(
      'org_organization',
      ['code'],
      ['OKPOCode', 'taxCode', 'vatCode'],
      ['name', 'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat', 'description'],
      [
        {repository: 'org_unit', attribute: 'parent', targetAttribute: 'parentID'},
        {repository: 'cdn_orgbusinesstype', attribute: 'businessType', targetAttribute: 'orgBusinessTypeID'},
        {repository: 'cdn_orgownershiptype', attribute: 'ownershipType', targetAttribute: 'orgOwnershipTypeID'}
      ]
    )
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'org_department',
      ['code'],
      ['isClerical'],
      ['name', 'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat', 'description'],
      [
        {repository: 'org_unit', attribute: 'parent', targetAttribute: 'parentID'},
        {repository: 'cdn_deptype', attribute: 'depType', targetAttribute: 'depTypeID'}
      ]
    )
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'org_staffunit',
      ['code'],
      ['subordinationLevel', 'isBoss'],
      ['name', 'nameGen', 'nameDat', 'fullName', 'fullNameGen', 'fullNameDat', 'description'],
      [
        {repository: 'org_unit', attribute: 'parent', targetAttribute: 'parentID'},
        {repository: 'org_profession', attribute: 'profession', targetAttribute: 'professionID'},
        {repository: 'cdn_staffunittype', attribute: 'type', targetAttribute: 'staffUnitTypeID'}
      ]
    )
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'org_employee',
      ['code'],
      ['birthDate', 'sexType'],
      [
        'firstName', 'firstNameGen', 'firstNameDat', 'firstNameObj',
        'lastName', 'lastNameGen', 'lastNameDat', 'lastNameObj',
        'middleName', 'middleNameGen', 'middleNameDat', 'middleNameObj',
        'shortFIO', 'shortFIOGen', 'shortFIODat', 'shortFIOObj',
        'fullFIO', 'fullFIOGen', 'fullFIODat', 'fullFIOObj',
        'apply', 'applyGen', 'applyDat', 'applyObj',
        'description', 'suffix'
      ],
      [
        {repository: 'uba_user', attribute: 'user', targetAttribute: 'userID'}
      ]
    )
  )
  container.getRepository('cdn_contact').registerLookup({
    repository: 'org_employee',
    attributes: ['employee'],
    targetAttribute: 'subjectID'
  })
  container.registerRepository(
    new NonCachedEntityRepository(
      'org_employeeonstaff',
      ['tabNo'],
      ['employeeOnStaffType'],
      ['description'],
      [
        {repository: 'org_employee', attribute: 'employee', targetAttribute: 'employeeID'},
        {repository: 'org_staffunit', attribute: 'staffunit', targetAttribute: 'staffUnitID'}
      ]
    )
  )
  container.registerRepository(
    new EntityRepository(
      'org_execgroup',
      ['code'],
      undefined,
      ['name', 'nameGen', 'nameDat'],
      [
        {repository: 'org_unit', attribute: 'parent', targetAttribute: 'parentID'}
      ]
    )
  )
  container.registerRepository(
    new NonCachedEntityRepository(
      'org_execgroupmember',
      ['orgUnitID', 'execGroupID'],
      undefined,
      [],
      [
        {repository: 'org_execgroup', attribute: 'execGroup', targetAttribute: 'execGroupID'},
        {repository: 'org_staffunit', attribute: 'orgUnit', targetAttribute: 'orgUnitID'}
      ]
    )
  )
}
