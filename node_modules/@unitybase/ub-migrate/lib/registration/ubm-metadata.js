const {EntityRepository, NonCachedEntityRepository, EntityFormat} = require('../metadata')
const {stringToArray, transform, iterateChildren, getAdmEntityName} = require('../metadata/utility')

function cmdCode(val) {
  if (val.hasOwnProperty('showList')) {
    return showListCmdCode(val)
  } else if (val.hasOwnProperty('showForm')) {
    return showFormCmdCode(val)
  } else if (val.hasOwnProperty('cmd')) {
    return val.cmd
  }

  return undefined
}

function showListCmdCode(val) {
  const cmdDef = val['showList']

  // If entity is not specified, assume it equals to shortcut code.
  if (!cmdDef.hasOwnProperty('entity')) {
    cmdDef.entity = val.code
  }

  const cmdCode = {
    cmdType: 'showList',
    cmdData: {params: [cmdDef]}
  }

  if (cmdDef['renderer']) {
    cmdCode.renderer = cmdDef['renderer']
    delete cmdDef['renderer']
  }

  if (cmdDef['hideActions']) {
    cmdCode.hideActions = stringToArray(cmdDef['hideActions'])
    delete cmdDef['hideActions']
  }

  if (cmdDef['formCode']) {
    cmdCode.cmdData.formCode = cmdDef['formCode']
    delete cmdDef['formCode']
  }

  const markers = []

  if (val.hasOwnProperty('cmpInitConfig')) {
    const cmdInitConfigMarker = '$$__cmpInitConfig__$$'
    cmdCode.cmpInitConfig = cmdInitConfigMarker
    markers.push([cmdInitConfigMarker, val.cmpInitConfig])
  }

  const {fieldList} = cmdDef
  if (Array.isArray(fieldList)) {
    for (const fld of fieldList) {
      if (typeof fld === 'object') {
        if (typeof fld.format === 'string') {
          const cmdMarker = '$$__' + fld.name + '_format__$$'
          markers.push([cmdMarker, fld.format])
          fld.format = cmdMarker
        }
        if (typeof fld.description === 'string') {
          const cmdMarker = '$$__' + fld.name + '_description__$$'
          markers.push([cmdMarker, `UB.i18n('${fld.description}')`])
          fld.description = cmdMarker
        }
      }
    }
  }

  let shortcutCmdCode = /** @type {string} */ JSON.stringify(cmdCode)
  for (const [marker, value] of markers) {
    shortcutCmdCode = shortcutCmdCode.replace('"' + marker + '"', value)
  }
  return shortcutCmdCode
}

function showFormCmdCode(val) {
  let cmdDef = val['showForm']
  if (typeof cmdDef === 'string') {
    cmdDef = {formCode: cmdDef}
  }

  // If entity is not specified, assume it equals to shortcut code.
  if (!cmdDef.hasOwnProperty('entity')) {
    if (cmdDef.cmdData && typeof cmdDef.cmdData.ubql === 'object') {
      cmdDef.cmdData.ubql.entity = cmdDef.formCode.split('-')[0]
      if (!cmdDef.cmdData.ubql.method) {
        cmdDef.cmdData.ubql.method = 'select'
      }
    } else {
      cmdDef.entity = cmdDef.formCode.split('-')[0]
    }
  }

  return JSON.stringify(Object.assign({cmdType: 'showForm'}, cmdDef))
}

const INSTANCE_LOOKUPS = [
  {repository: 'ubm_desktop', attribute: 'desktop', targetAttribute: 'instanceID'},
  {repository: 'ubm_navshortcut', attribute: 'shortcut', targetAttribute: 'instanceID'},
]

const FOREIGN_ENTITY_LOOKUPS = [
  {repository: 'uba_role', attribute: 'subject', targetAttribute: 'subjID'},
  {repository: 'org_unit', attribute: 'orgUnit', targetAttribute: 'ounitID'},
]

/**
 * Registers entity created by aclRls entity mixin for managing access for uba_abject and org_unit entities
 *
 * @param {Container} container
 * @param {UBDomain} domainInfo
 * @param {string} entityName
 */
function registerUbmAclEntity (container, domainInfo, entityName) {
  const baseEntityName = entityName.substr(0, entityName.lastIndexOf('_'))
  const attributes = Object.keys(domainInfo.entities[entityName].attributes)
  const keyAttributes = attributes.filter(
    key => !['ID', 'valueID'].includes(key)
  )
  const instanceLookup = INSTANCE_LOOKUPS.find(
    ({ repository }) => repository === baseEntityName
  )
  const foreignKeyLookups = FOREIGN_ENTITY_LOOKUPS.filter(
    ({ targetAttribute }) => attributes.includes(targetAttribute)
  )
  const lookups = [ instanceLookup, ...foreignKeyLookups ]

  // for case if we add org_unit to aclRls mixin but org model is not registered yet
  if (foreignKeyLookups.find(({ repository }) => repository === 'org_unit')) {
    container.registerRepository(
      new NonCachedEntityRepository(
        'org_unit',
        ['code'],
        ['unitType'],
        ['caption'],
        []
      )
    )
  }
  const repository = new NonCachedEntityRepository(entityName, keyAttributes, [], [], lookups)

  container.registerRepository(repository)
}

module.exports = function (container, domainInfo) {
  const desktopAdmEntityName = getAdmEntityName(domainInfo, 'ubm_desktop')
  const shortcutAdmEntityName = getAdmEntityName(domainInfo, 'ubm_navshortcut')
  const mdUbmShortcutAdm = new EntityFormat()
    .key('subject')
    .fromContext('shortcut')
    .wrapAsEntity(shortcutAdmEntityName)

  container.registerFileType(
    'enums',
    new EntityFormat()
      .key('eGroup')
      .virtual()
      .defaultChild(
        {
          context: ['eGroup'],
          metadata: new EntityFormat()
            .key('code')
            .caption('name')
            .copy('shortName')
            .autoNumber('sortOrder')
            .fromContext('eGroup')
            .wrapAsEntity('ubm_enum')
        }
      )
  )

  container.registerFileType(
    'navigation',
    new EntityFormat()
      .key('code')
      .caption('caption')
      .copy('description', 'url', 'isDefault', 'iconCls')
      .wrapAsEntity('ubm_desktop')
      .child('access', {
        context: {desktop: 'code'},
        iterate(val, ctx) {
          return transform(
            iterateChildren(val),
            new EntityFormat()
              .key('subject')
              .fromContext('desktop')
              .wrapAsEntity(desktopAdmEntityName),
            ctx
          )
        }
      })
      .child(
        'items',
        {
          createContext(obj, value, ctx) {
            const childCtx = Object.assign(Object.create(ctx), {desktop: obj.code})
            if (value.access) {
              childCtx.access = value.access
            }
            return childCtx
          },
          metadata: new EntityFormat()
            .key('code')
            .caption('caption')
            .fromContext('parent', 'desktop')
            .copy('inWindow', 'isCollapsed', 'isFolder', 'iconCls', 'cmdCode')
            .defaultValue('isFolder', val => val.items !== undefined)
            .defaultValue('cmdCode', cmdCode)
            .autoNumber('displayOrder')
            .wrapAsEntity('ubm_navshortcut')
            .child(
              'access',
              {
                context: {shortcut: 'code'},
                getValue(val, ctx) {
                  return val !== undefined ? val : ctx.access
                },
                iterate(val, ctx) {
                  return transform(iterateChildren(val), mdUbmShortcutAdm, ctx)
                }
              }
            )
            .child(
              'items',
              {
                createContext(obj, value, ctx) {
                  const childCtx = Object.assign(Object.create(ctx), {parent: obj.code})
                  if (value.access) {
                    childCtx.access = value.access
                  }
                  return childCtx
                },
                metadata: '$self'
              }
            )
        })
  )

  container.registerRepository(
    new EntityRepository(
      'ubm_enum',
      ['eGroup', 'code'],
      ['sortOrder'],
      ['name', 'shortName']
    )
  )

  container.registerRepository(new EntityRepository(
    'ubm_desktop',
    ['code'],
    ['url', 'isDefault'],
    ['caption', 'description']
  ))

  if (desktopAdmEntityName.endsWith('_acl')) {
    registerUbmAclEntity(container, domainInfo, desktopAdmEntityName)
  } else {
    container.registerRepository(
      new NonCachedEntityRepository(
        'ubm_desktop_adm',
        ['instanceID', 'admSubjID'],
        [],
        [],
        [
          {repository: 'ubm_desktop', attribute: 'desktop', targetAttribute: 'instanceID'},
          {repository: 'uba_role', attribute: 'subject', targetAttribute: 'admSubjID'}
        ]
      )
    )
  }

  container.registerRepository(new EntityRepository(
    'ubm_navshortcut',
    ['code'],
    ['isFolder', 'cmdCode', 'inWindow', 'isCollapsed', 'displayOrder', 'iconCls'],
    ['caption'],
    [
      {repository: 'ubm_desktop', attribute: 'desktop', targetAttribute: 'desktopID'},
      {repository: '$self', attribute: 'parent', targetAttribute: 'parentID'}
    ]
  ))

  if (shortcutAdmEntityName.endsWith('_acl')) {
    registerUbmAclEntity(container, domainInfo, shortcutAdmEntityName)
  } else {
    container.registerRepository(
      new NonCachedEntityRepository(
        'ubm_navshortcut_adm',
        ['instanceID', 'admSubjID'],
        [],
        [],
        [
          {repository: 'ubm_navshortcut', attribute: 'shortcut', targetAttribute: 'instanceID'},
          {repository: 'uba_role', attribute: 'subject', targetAttribute: 'admSubjID'}
        ]
      )
    )
  }
}
