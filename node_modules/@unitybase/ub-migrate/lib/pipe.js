/**
 * Class which helps to pipeline processing of items from the IterableIterator.
 * @example
 * new Pipe(models, {conn, langConfig})
 *   .pipe(lookupDataFiles)
 *   .pipe(readDataFile)
 *   .pipe(parseDataFile)
 *   .pipe(transformFile)
 *   .pipe(printEntityInstance)
 *   .run();
 */
class Pipe {
  /**
   * @param stream
   * @param {MigrationContext} context
   */
  constructor(stream, context) {
    this.stream = stream
    this.context = context
  }

  /**
   * Chain one or function.
   * @param {Function|null} transform
   * @return {Pipe}
   */
  pipe(transform) {
    if (typeof transform === 'function') {
      this.stream = transform(this.stream, this.context)
    }
    return this
  }

  run() {
    for (const i of this.stream) {
      // Do nothing, but we need to exhaust the stream.
    }
  }
}

module.exports = {Pipe}
