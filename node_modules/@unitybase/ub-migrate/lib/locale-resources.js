const {merge} = require('lodash')

class LocaleResources {
  constructor() {
    this._resourcesByLang = {}
  }

  addResources(lang, resources) {
    let r = this._resourcesByLang[lang]
    if (!r) {
      r = this._resourcesByLang[lang] = {}
    }

    merge(r, resources)
  }

  get(lang, resourceKey) {
    let r = this._resourcesByLang[lang]
    if (!r) {
      return undefined
    }

    return getByPath(r, resourceKey)
  }
}

/**
 * Gets the value at `path` of `object` or `undefined`
 * @param {object} obj The object to query
 * @param {string} p The path of the property to get
 */
function getByPath(obj, p) {
  if (obj[p]) return obj[p]
  let pp = p.split('.')
  let i = 0
  let L = pp.length
  do {
    obj = obj[pp[i++]]
  } while ((i < L) && (typeof obj === 'object'))
  return (i === L) ? obj : undefined
}

/**
 * @param langConfig
 * @param {SyncConnection} conn
 * @return {LocaleResources}
 */
function readLocales(langConfig, conn) {
  const resources = new LocaleResources()

  for (const lang of langConfig.supportLang) {
    const localesFromServer = conn.get(`/allLocales?lang=${lang}&json=1&includeDomain=1&includeData=1`)
    try {
      resources.addResources(lang, JSON.parse(localesFromServer))
    } catch (e) {
      console.error(
        'Require package @unitybase/ub@5.21.3 or later on server to support endpoint query like %s',
        `/allLocales?lang=${lang}&json=1&includeDomain=1&includeData=1`
      )
      throw e
    }
  }

  return resources
}

module.exports = {
  readLocales,
  LocaleResources
}
