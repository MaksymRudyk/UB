const path = require('path')
const fs = require('fs')
const {UBDomain} = require('@unitybase/cs-shared')

module.exports = {
  getModels,
  getDomainInfo,
  getTenantIDs
}

function getModels(domainInfo, cfg) {
  let models = [...domainInfo.orderedModels]
  if (cfg && cfg.models) {
    // "Include only" filter
    const newModels = []
    for (const modelName of cfg.models.split(',')) {
      const m = models.find(m => m.name === modelName)
      if (m) {
        newModels.push(m)
      } else {
        console.warn(`Model "${modelName}" is not defined in configuration file!`)
      }
    }
    models = newModels
  } else if (cfg.skip) {
    for (const modelName of cfg.skip.split(',')) {
      const index = models.findIndex(m => m.name === modelName)
      if (index >= 0) {
        models.splice(index, 1)
      } else {
        console.warn(`Model "${modelName}" is not defined in configuration file!`)
      }
    }
  }

  // Remove "public only" models and models pointing to non-existing paths
  for (let i = 0; i < models.length; i++) {
    const m = models[i]
    if (!m.hasOwnProperty('realPath')) {
      models.splice(i--, 1)
      continue
    }

    m.path = path.resolve(m.realPath)
    if (!fs.existsSync(m.path)) {
      console.warn(`Path "${m.path}" does not exist, skipping model "${m.name}"!`)
      models.splice(i--, 1)
    }
  }

  return models
}

/**
 * @param {ServerSession} session
 * @param {UBDomain} providedDomainInfo
 * @param {MigrationOptions} options
 * @return {UBDomain}
 */
function getDomainInfo(session, providedDomainInfo, options) {
  const conn = session.connection
  if (!providedDomainInfo) {
    providedDomainInfo = conn.getDomainInfo(true)
  }

  if (Object.values(providedDomainInfo.models).some(m => m.realPath)) {
    return providedDomainInfo
  }

  if (!options.silent) {
    console.log('Domain was loaded without extended info, query domain info explicitly')
  }
  const domainData = conn.get('getDomainInfo', {
    v: 4,
    userName: conn.userLogin(),
    extended: true
  })
  return new UBDomain(domainData)
}

function getTenantIDs(cfg) {
  // Convert an optional string parameter "tenantID" into a number array
  let tenantIDs = cfg.tenantID
  if (typeof tenantIDs === 'string') {
    tenantIDs = Number.parseInt(tenantIDs, 10)
  }
  return Number.isInteger(tenantIDs) ? [tenantIDs] : undefined
}
