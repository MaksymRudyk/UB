const fs = require('fs')
const path = require('path')
const {argv, options} = require('@unitybase/base')

const opts = options
  .describe('convert_locale_js_to_json', 'Convert js locale files to json')
  .add(argv.establishConnectionFromCmdLineAttributes._cmdLineParams)
  .add({
    short: 'm',
    long: 'models',
    param: 'models',
    defaultValue: '*',
    help: 'Specify comma-separated list of models to migrate'
  })
  .add({
    short: 'fl',
    long: 'singleFile',
    defaultValue: '*',
    param: 'singleFile',
    help: 'A single file to migrate'
  })


const cfg = opts.parseVerbose({}, true)
if (!cfg) {
  return
}

if (!!cfg.singleFile && !!cfg.models) {
  console.error('"singleFile" setting cannot be used together with "models"')
  return
}

if (!!cfg.singleFile && !!cfg.models) {
  console.error('At least one parameter "singleFile" or "models" must be specified')
  return
}

function convertFile(fileName) {
  const content = fs.readFileSync(fileName, 'utf8')
  const func = new Function('UB', 'Ext', content)

  const ExtStub = {}

  const UbStub = {
    i18nExtend(obj) {
      this._data = obj
    }
  }

  func(UbStub, ExtStub)

  const parsedName = path.parse(fileName)
  const outputFileName = path.join(parsedName.dir, parsedName.name) + '.json'
  if (fs.existsSync(outputFileName)) {
    console.error('File "%s" already exists! Cannot overwrite!', outputFileName)
    return
  }

  const jsonContent = JSON.stringify(UbStub._data, undefined, 2)

  fs.writeFileSync(outputFileName, jsonContent)

  console.log('Written JSON into file "%s".  Do not forget to clean up file "%s"', outputFileName, fileName)
}

if (cfg.singleFile) {
  convertFile(cfg.singleFile)
  return
}



argv.establishConnectionFromCmdLineAttributes(cfg)
const serverConfig = argv.getServerConfiguration(true)
const domainModels = serverConfig.application.domain.models

const models = []
for (const modelName of cfg.models.split(',')) {
  const m = domainModels.find(m => m.name === modelName)
  if (m) {
    models.push(m)
  } else {
    console.warn(`Model "${modelName}" is not defined in configuration file!`)
  }
}


/**
 * @param {string} dir
 * @return {IterableIterator<string>}
 */
function* lookupLocaleJsFiles(dir) {
  if (fs.existsSync(dir)) {
    for (const fileName of fs.readdirSync(dir).sort()) {
      if (fileName.match(/^lang-\w+\.js$/)) {
        yield path.join(dir, fileName)
      }
    }
  }
}

/**
 * @param {IterableIterator} models
 * @return {IterableIterator<string>}
 */
function* lookupModelsDataFiles(models) {
  for (const m of models) {
    for (const df of lookupLocaleJsFiles(path.join(m.realPath, 'public/locale'))) {
      yield df
    }
  }
}


for (const fileName of lookupModelsDataFiles(models)) {
  convertFile(fileName)
}
